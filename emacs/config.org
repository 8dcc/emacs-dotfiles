#+title: Vanilla emacs configuration
#+options: toc:nil
#+property: header-args:emacs-lisp :tangle config.el
#+author: 8dcc

#+TOC: headlines 2

* Identification

Identification for GPG configuration, email, templates, etc.

#+begin_src emacs-lisp
(setq user-full-name "8dcc"
      user-mail-address "8dcc.git@gmail.com")
#+end_src

* Theme

Remove GUI bars.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

Use a separate Custom file for more readability. This will contain the
SHA-256 hash of the trusted themes, and other user changes. For more
information, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][50.1.4 Saving Customizations]] and
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][50.1.7 Custom Themes]].

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file)
#+end_src

Load my custom theme from =~/.emacs.d/themes/x8dcc-modus-vivendi-theme.el=.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
(load-theme 'x8dcc-modus-vivendi)
#+end_src

Disable emacs' startup message.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

Change the emacs splash screen image. This should not matter since
it's overwritten by dashboard.

#+begin_src emacs-lisp
(setq fancy-splash-image (concat user-emacs-directory "my-media/splash.png"))
#+end_src

* Fonts

Default font. Most of the =.bdf= files are in my [[https://github.com/8dcc/linux-dotfiles][linux-dotfiles]] repo.

#+begin_src emacs-lisp
(when (member "Dina" (font-family-list))
    (set-frame-font "Dina 8" t nil))
#+end_src

Fallback font for unicode. You can't specify =nil= there, it needs to be
='unicode=.

#+begin_src emacs-lisp
(when (member "Cozette" (font-family-list))
  (set-fontset-font t 'unicode "Cozette"))
#+end_src

Variable pitch and fixed pitch fonts.

#+begin_src emacs-lisp
(when (member "Fira Sans" (font-family-list))
  (set-face-attribute 'variable-pitch nil
                      :family "Fira Sans"
                      :height 100
                      :weight 'regular))

(when (member "Dina" (font-family-list))
  (set-face-attribute 'fixed-pitch nil
                      :family "Dina"))
#+end_src

Change =org-done= faces.

#+begin_src emacs-lisp
(set-face-attribute 'org-done          nil :inherit 'shadow :bold t)
(set-face-attribute 'org-headline-done nil :inherit 'shadow)
#+end_src

* Packages
** Package managers

Bootstrap [[about:blank][straight.el]], which will be used as a "back-end" for =use-package=. For
more information, see: [[https://web.archive.org/web/20230522053703/https://jeffkreeftmeijer.com/emacs-straight-use-package/][Link]].

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el"
                          user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
      (url-retrieve-synchronously
        "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Install [[https://github.com/jwiegley/use-package][use-package]] (through =straight.el=) for more convenience. Setting
=straight-use-package-by-default= tells use-package to always use straight.el to
install packages (instead of emacs' package.el), even without specifying
=:straight t=.

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
#+end_src

See also [[file:./straight/versions/default.el][versions/default.el]], the resulting [[https://github.com/radian-software/straight.el#configuration-reproducibility][lockfile]] of
=M-x straight-freeze-versions=.

** Diminish

For hiding minor modes from the modeline. We will be using =:diminish=
in a lot of =(use-package)= expressions, to hide those minor modes.

#+begin_src emacs-lisp
(use-package diminish
  :config
  (diminish 'abbrev-mode)
  (diminish 'visual-line-mode))
#+end_src

** Evil & Evil collection

For vi-like keybinds. Some notes about the configuration:

- We have to set these variables *before* loading both =evil= and =evil-collection=
  packages.
- We have to set =evil-want-integration= and =evil-want-keybinding= for
  =evil-collection=.
- Configure split direction so new splits are opened to the bottom and to the
  right.
- We set the undo system to =undo-redo=.
- We set =evil-want-C-i-jump= to =nil= to avoid some =TAB= problems.
- We set =evil-mode-line-format= for displaying the evil mode before the buffer
  name. See also [[*Modeline][Modeline]].
- We will use I-search as evil's search module so it's consistent when using
  =query-replace= and commands like that (although some stuff like highlight
  persistence doesn't behave like in vim).
- We alias =forward-evil-word= to =forward-evil-symbol= and set
  =evil-symbol-word-search= so using =b= and =e= ignores =_= and =-= depending on the
  language's symbols.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-split-window-below t
        evil-vsplit-window-right t
        evil-undo-system #'undo-redo
        evil-want-C-i-jump nil
        evil-mode-line-format '(after . mode-line-frame-identification))
  :config
  (evil-select-search-module 'evil-search-module 'isearch)
  (defalias #'forward-evil-word #'forward-evil-symbol)
  (setq-default evil-symbol-word-search t)
  (evil-mode 1))
#+end_src

For using vi-like keybinds in other buffer types.

#+begin_src emacs-lisp
(use-package evil-collection
  :diminish evil-collection-unimpaired-mode
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help)
  (evil-collection-init))
#+end_src

** Vundo & Undo history

Instead of treating undo/redo as a linear sequence of changes, emacs treats undo
history as a branching tree of changes. This package allows you to visualize and
navigate this tree easily.

#+begin_src emacs-lisp
(use-package vundo)
#+end_src

Remember buffer undo history across sessions.

#+begin_src emacs-lisp
(use-package undohist
  :init
  (undohist-initialize)
  :config
  (setq undohist-ignored-files
        '("\\.gpg\\'"
          x8dcc/is-git-commit-filename
          file-remote-p)))
#+end_src

** General

Define our own =SPC= keybinds.

The =general-create-definer= macro is used to define our own =x8dcc/*= macro, which
will be used later for defining the keys more easily. We specify the states for
the keybinds (all except of evil's insert), we specify the keymaps (See
[[elisp:(describe-variable 'general-keymap-aliases)][general-keymap-aliases]]), and the prefix. We will use =SPC= as prefix for normal
modes, and =M-SPC= for other modes like /emacs/ or evil's /insert/. See also
=general-non-normal-states=.

For the main keybinds, see [[Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(use-package general
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer x8dcc/def-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer x8dcc/def-keys-org
    :states '(normal insert visual emacs)
    :keymaps 'org-mode-map
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer x8dcc/def-keys-latex
    :states '(normal insert visual emacs)
    :keymaps 'TeX-mode-map
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer x8dcc/def-keys-lisp
    :states '(normal insert visual emacs)
    :keymaps '(lisp-mode-map
               emacs-lisp-mode-map
               lisp-interaction-mode-map
               lisp-data-mode-map)
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer x8dcc/def-keys-c
    :states '(normal insert visual emacs)
    :keymaps '(c-mode-map
               c++-mode-map
               java-mode-map
               js-mode-map)
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer x8dcc/def-keys-message
    :states '(normal insert visual emacs)
    :keymaps 'message-mode-map
    :prefix "SPC"
    :non-normal-prefix "M-SPC"))
#+end_src

** Which key

For the keybind completion menu. Press =C-x= and wait for about 1 second to
display a list of available keybinds.

#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t)
  (which-key-mode 1))
#+end_src

** Projectile

For managing projects.

#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :config
  (projectile-mode 1))
#+end_src

** Magit

You should not need a description for magit.

We change =magit-display-buffer-function= so the status window doesn't open as a
popup. For other available functions, see =C-h f magit-display-buffer- TAB=.

#+begin_src emacs-lisp
(use-package magit
  :hook ((git-commit-setup . evil-insert-state))
  :config
  (setq magit-diff-refine-hunk t
        magit-display-buffer-function
        #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Dashboard

A nice dashboard with recent files, recent projects, and org agenda.

#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-banner-logo-title "8dcc's Emacs"
        dashboard-startup-banner (concat user-emacs-directory
                                        "my-media/splash.png")
        dashboard-center-content t
        dashboard-show-shortcuts nil
        dashboard-set-footer nil
        dashboard-page-separator "\n\n"
        dashboard-items '((recents . 10)
                          (projects . 5)
                          (agenda . 10)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Vertico

Vertical completion for =M-x=, =find-file=, etc.

Use =vertico-reverse-mode= to show completion on top of minibuffer, and
not bellow it.

#+begin_src emacs-lisp
(use-package vertico
  :config
  (vertico-mode 1)
  (vertico-reverse-mode 1))
#+end_src

** Marginalia

For extra information on the minibuffer when using [[Vertico][vertico]].

#+begin_src emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode 1))
#+end_src

** Consult

For providing better completion buffers similar to [[Vertico][vertico]] (same author). This
doesn't just add the =consult-*= commands, but also replaces the vanilla
"completion" buffers in emacs.

We set =consult-preview-key= to the following list, so the preview isn't loaded
until 0.3 seconds have passed.

We set =completion-in-region-function= to =#'consult-completion-in-region= for
better completion in buffers like eshell. See [[https://github.com/minad/vertico#completion-at-point-and-completion-in-region][vertico readme]].

#+begin_src emacs-lisp
(use-package consult
  :config
  (setq consult-preview-key (list :debounce 0.3 'any))
  (setq completion-in-region-function
		(lambda (&rest args)
          (apply (if vertico-mode
					 #'consult-completion-in-region
                   #'completion--in-region)
				 args))))
#+end_src

** Orderless

Adds a better search completion to =completion-styles= (Used in =M-x=,
=find-file=, etc.)

#+begin_src emacs-lisp
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)))
#+end_src

** Dumb jump

Dumb jump is a backend for the =xref= Emacs command. It doesn't use a TAGS file or
any background processes. Instead, it uses grep-like tools.

Depends on =s=, =dash= and =popup= packages.

#+begin_src emacs-lisp
(use-package dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read))
#+end_src

** Popper

For converting less-important buffers into popups. They can be toggled
with =SPC t p=. See [[Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(use-package popper
  :config
  (setq popper-group-function #'popper-group-by-projectile
        popper-reference-buffers '(compilation-mode
                                   messages-buffer-mode
                                   help-mode
                                   occur-mode
								   man-mode
                                   "^\\*Warnings\\*"
                                   "^\\*Compile-Log\\*"
                                   "^\\*Backtrace\\*"
                                   "^\\*evil-registers\\*"
                                   "^\\*Apropos\\*"
                                   "^\\*scratch\\*"
                                   "^\\*Macroexpansion\\*"
                                   "^\\*xref\\*"))
  (let ((popper-mode-line-formatted (propertize " *POP* " 'face 'bold)))
    (setq popper-mode-line popper-mode-line-formatted))
  (popper-mode 1))
#+end_src

** COMMENT Highlight indentation

We will enable indentation guides in C mode by default. It can also be toggled
with =SPC t C=, see [[*Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(straight-use-package
 '(highlight-indent-guides :type git :host github :repo "getong/highlight-indent-guides"))
#+end_src

Use the same character as the fill column, and ignore the first indentation
level. Setting =highlight-indent-guides-auto-enabled= is necessary for changing
the face foreground.

#+begin_src emacs-lisp
(setq highlight-indent-guides-method 'character
      highlight-indent-guides-character ?\u00A6
      highlight-indent-guides-suppress-auto-error t
      highlight-indent-guides-auto-enabled nil)
#+end_src

This is the function for not highlighting the first level.

#+begin_src emacs-lisp
(defun x8dcc/indent-guide-highlighter (level responsive display)
  (if (> level 0)
      (highlight-indent-guides--highlighter-default level responsive display)))

(setq highlight-indent-guides-highlighter-function 'x8dcc/indent-guide-highlighter)
#+end_src

** EMMS

Enable the /Emacs Multi-Media System/ (EMMS).

We add =--no-video= parameter for =mpv= so we can listen to YouTube videos.

Since =emms-volume-*= changes the volume of the whole system, I added =--volume=X=
to the =mpv= parameters, since it's always a bit loud by default.

We set =emms-mode-line-mode= to zero so it displays only the time instead of the
filename.

#+begin_src emacs-lisp
(use-package emms
  :config
  (emms-all)
  (setq emms-player-list '(emms-player-mpv
                           emms-player-vlc)
        emms-player-mpv-parameters '("--quiet"
                                     "--really-quiet"
                                     "--no-audio-display"
                                     "--no-video"
                                     "--volume=50"))
  (emms-mode-line-mode 0))
#+end_src

** Spelling

We will use the =spell-fu= package for basic spelling. I don't use any packages
for code completion or code syntax.

The package won't be enabled in Windows systems, since it depends on the =aspell=
command.

We will use both =en_US= and =es= dictionaries.

We also exclude a list of faces when using to avoid highlighting source code
blocks, tags, etc. This list was taken from the [[https://github.com/doomemacs/doomemacs/blob/a89d4b7df556bb8b309d1c23e0b60404e750f156/modules/checkers/spell/config.el#L85][doom emacs]] repository.

#+begin_src emacs-lisp
(unless (member system-type '(ms-dos windows-nt cygwin))
  (use-package spell-fu
    :hook ((org-mode markdown-mode erc-mode mail-mode text-mode) . spell-fu-mode)
    :config
    (add-hook 'spell-fu-mode-hook
              (lambda ()
                (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "en_US"))
                (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "es"))))
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(font-lock-keyword-face
                        font-lock-function-name-face
                        font-lock-type-face
                        font-lock-variable-name-face
                        font-lock-warning-face
                        font-latex-sedate-face
                        font-latex-warning-face
                        font-latex-math-face))))
    (add-hook 'markdown-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(markdown-code-face
                        markdown-html-attr-name-face
                        markdown-html-attr-value-face
                        markdown-html-tag-name-face
                        markdown-inline-code-face
                        markdown-link-face
                        markdown-markup-face
                        markdown-plain-url-face
                        markdown-reference-face
                        markdown-url-face))))
    (add-hook 'org-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(org-block
                        org-block-begin-line
                        org-block-end-line
                        org-cite
                        org-cite-key
                        org-code
                        org-date
                        org-footnote
                        org-formula
                        org-inline-src-block
                        org-latex-and-related
                        org-link
                        org-meta-line
                        org-property-value
                        org-ref-cite-face
                        org-special-keyword
                        org-tag
                        org-todo
                        org-todo-keyword-done
                        org-todo-keyword-habt
                        org-todo-keyword-kill
                        org-todo-keyword-outd
                        org-todo-keyword-todo
                        org-todo-keyword-wait
                        org-verbatim))))))
#+end_src

** Move text

For dragging lines with =M-<down>= and =M-<up>=. I started using [[https://github.com/rejeep/drag-stuff.el][drag-stuff.el]], but
the code is full of errors that generate warnings and hasn't been updated in a
long time.

#+begin_src emacs-lisp
(straight-use-package
 '(move-text :type git :host github :repo "8dcc/move-text"))

(move-text-default-bindings)
(add-hook 'text-mode-hook #'move-text-mode)
(add-hook 'prog-mode-hook #'move-text-mode)
#+end_src

Drag stuff with =M-j= and =M-k=, not just with =M-<down>= and =M-<up>=.

#+begin_src emacs-lisp
(keymap-set move-text-mode-map "M-j" 'move-text-down)
(keymap-set move-text-mode-map "M-k" 'move-text-up)
#+end_src

** Highlight TODOs

Highlight common keywords inside =org-mode= and =prog-mode=. Added =DELME=
since I use that often.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode prog-mode LaTeX-mode) . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        '(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("DELME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

** Rainbow mode

For displaying colors in the background of RGB strings.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook ((html-mode css-mode js-mode)  . rainbow-mode))
#+end_src

** Rainbow delimiters

Add rainbow colors to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode
          scheme-mode
          common-lisp-mode
          lisp-mode
          LaTeX-mode)
         . rainbow-delimiters-mode))
#+end_src

** Highlight numbers

For highlighting numeric literals.

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook ((prog-mode . highlight-numbers-mode)))
#+end_src

** Clang format

For formatting C files. You can find my =.clang-format= in my [[https://github.com/8dcc/linux-dotfiles/tree/main/dotfiles/clang-format][8dcc/linux-dotfiles]] repo.

#+begin_src emacs-lisp
(use-package clang-format
  :config
  (setq clang-format-style "file"))
#+end_src

** Htmlize

Required by =org-html-export-to-html=.

#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

** Git gutter fringe

Show git changes in the fringe.

First of all, we create a macro for defining a fringe bitmap from a width and a
height. This macro will calculate the number needed for each row of the bitmap
from the width, make a list of =h= elements, and turn it into a vector. It will
pass that, with the =name= and =alignment= to =define-fringe-bitmap=. For more
information, see [[https://github.com/8dcc/lisp-stuff/blob/main/src/bitmap-rect.org][8dcc/lisp-stuff]].

#+begin_src emacs-lisp
(defmacro x8dcc/fringe-helper-rect (name alignment w h)
  "Convert W and H to a bitmap array, and call `define-fringe-bitmap' with NAME
and ALIGNMENT as parameters."
  `(define-fringe-bitmap ,name
     (apply #'vector
            (make-list ,h
                       (- (ash 1 ,w) 1)))
     nil nil ,alignment))
#+end_src

We then use our new =my-fringe-helper-rect= to specify the width and height of the
bitmap used in the fringe. It will be drawn with my theme's
=bg-[added/changed/removed]= faces, and with the default fringe background.

NOTE: For more information on creating the bitmaps easily with strings, see the
=fringe-helper-define= macro.

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config
  (x8dcc/fringe-helper-rect 'git-gutter-fr:added nil 3 30)
  (x8dcc/fringe-helper-rect 'git-gutter-fr:deleted nil 3 30)
  (x8dcc/fringe-helper-rect 'git-gutter-fr:modified nil 3 30)
  (global-git-gutter-mode 1))
#+end_src

** COMMENT Whiteroom mode

Great mode for distraction-free editing.

We set =writeroom-mode-line= to =nil=, change to =t= to display the modeline. We also
set =writeroom-restore-window-config=, which makes sense since it's going to
overwrite the window layout.

We use 81 for =writeroom-width= so our whole 80 char =fill-column= fits. We don't
use =(+ fill-column 1)= because we haven't set it yet. See [[Misc visual settings][Misc visual settings]].

We also remove =writeroom-set-fullscreen= from =writeroom-global-effects=, so the
emacs window doesn't get changed. We already disabled all the other menu bar
items in [[Theme][Theme]].

Lastly, we disable fringes in =writeroom-mode-enable-hook=, and re-enable them in
=writeroom-mode-disable-hook=. We could also increase and reset the font size from
these lambdas.

#+begin_src emacs-lisp
(use-package writeroom-mode
  :config
  (setq writeroom-mode-line nil
        writeroom-restore-window-config t
        writeroom-width 81
        writeroom-global-effects '(writeroom-set-alpha
                                   writeroom-set-menu-bar-lines
                                   writeroom-set-tool-bar-lines
                                   writeroom-set-vertical-scroll-bars
                                   writeroom-set-bottom-divider-width))
  (add-hook 'writeroom-mode-enable-hook (lambda ()
                                          (fringe-mode 0)))
  (add-hook 'writeroom-mode-disable-hook (lambda ()
                                           (fringe-mode nil))))
#+end_src

** Evil lion (alignment)

Evil align operator, port of vim-lion by Tom McDonald.

#+begin_src emacs-lisp
(use-package evil-lion
  :config
  (setq evil-lion-left-align-key (kbd "g a"))
  (setq evil-lion-right-align-key (kbd "g A"))
  (evil-lion-mode))
#+end_src

** Big font

Personal package for toggling a bigger font face. Uses a =straight.el= recipe.

#+begin_src emacs-lisp
(straight-use-package
 '(big-font :type git :host github :repo "8dcc/big-font.el"))
#+end_src

And the settings.

#+begin_src emacs-lisp
(setq big-font-height 120
      big-font-family-alist '((default     . "Iosevka Comfy Fixed")
                              (fixed-pitch . "Iosevka Comfy Fixed")))
#+end_src

** AucTex

Essential package for LaTeX editing, comes with a useful preview mode.

#+begin_src emacs-lisp
(use-package auctex)
#+end_src

** COMMENT Ada mode

Major mode for programming in Ada.

Mainstream version is out of date.

#+begin_src emacs-lisp
(straight-use-package
 '(ada-mode :type git :host github :repo "tkurtbond/old-ada-mode"))
#+end_src

Since emacs 28, you need to manually add the mode to =auto-mode-alist=.

#+begin_src emacs-lisp
(mapc (lambda (element)
        (add-to-list 'auto-mode-alist (cons element 'ada-mode)))
      '("\\.gpr\\'" "\\.ada\\'" "\\.ads\\'" "\\.adb\\'"))
#+end_src

** Nasm mode

Personal fork of [[https://github.com/skeeto/nasm-mode][skeeto/nasm-mode]] with some modified functionality.

#+begin_src emacs-lisp
(straight-use-package
 '(nasm-mode :type git :host github :repo "8dcc/nasm-mode"))
#+end_src

Use it as the default mode for =.asm= files. For more information on
=auto-mode-alist=, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html][Choosing File Modes]].

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.asm\\'"  . nasm-mode))
#+end_src

** Beardbolt

Personal fork of the [[https://github.com/joaotavora/beardbolt][beardbolt]] package for disassembling C/C++ code in Emacs.

- We set =beardbolt-shuffle-rainbow= to =t= increase contrast between blocks.
- We set =beardbolt-compile-delay= to =nil= to disable automatic recompilation on
  buffer change. Just call =x8dcc/beardbolt-disassemble= whenever needed with
  =SPC m d=.

#+begin_src emacs-lisp
(straight-use-package
 '(beardbolt :type git :host github :repo "8dcc/beardbolt"))

(setq beardbolt-shuffle-rainbow t
      beardbolt-compile-delay nil)
#+end_src

** x86-lookup

Quickly jump to x86 documentation from Emacs. See [[https://github.com/skeeto/x86-lookup][skeeto/x86-lookup]].

#+begin_src emacs-lisp
(use-package x86-lookup
  :config
  (setq x86-lookup-pdf
        (concat user-emacs-directory "my-media/intel-sdm-vol2.pdf")
        x86-lookup-browse-pdf-function
        (lambda (pdf page)
          (start-process "firefox" nil "firefox"
                         (format "file://%s#page=%d" pdf page)))))
#+end_src

The volume 2 of the Intel SDM is included in this repository.

* Misc functions and macros

This function will be used for hooking a list of =functions= into the specified
=target=.

#+begin_src emacs-lisp
(defun x8dcc/hook-funcs (target functions)
  "Hook each function in FUNCTIONS to TARGET using `add-hook'."
  (mapcar (lambda (func)
            (add-hook target func))
          functions))
#+end_src

This function is similar to =x8dcc/hook-funcs=, but it will be used for hooking a
*single function* to *each target* of the list.

#+begin_src emacs-lisp
(defun x8dcc/hook-to-targets (function targets)
  "Hook FUNCTION to each target in TARGETS using `add-hook'."
  (mapcar (lambda (target)
            (add-hook target function))
          targets))
#+end_src

Insert a separator comment that fills up to the line column.

#+begin_src emacs-lisp
(defun x8dcc/separator-comment (&optional max-width)
  (interactive)
  (unless max-width
    (setq max-width fill-column))
  (let* ((start (string-trim comment-start))
         (end   (string-trim comment-end))
         (remaining (- max-width (+ (length start)
                                    (length end)))))
    (save-excursion
      (end-of-line)
      (insert "\n" start)
      (insert-char ?- remaining)
      (insert end))))
#+end_src

Toggle newline insertion when saving a file.

#+begin_src emacs-lisp
(defun x8dcc/toggle-final-newline ()
  "Toggle newline insertion when saving the current buffer. See
`require-final-newline'."
  (interactive)
  (setq-local require-final-newline (not require-final-newline))
  (if require-final-newline
      (message "Final newline enabled in the current buffer.")
    (message "Final newline disabled in the current buffer.")))
#+end_src

Run the specified command as root. See =shell-command= and =sudo(8)=. Note how the
password itself is not saved in the =shell-command-history= inside the
=~/.emacs.d/history= file, just the shell command is saved.

#+begin_src emacs-lisp
(defun x8dcc/sudo-shell-command (command)
  (interactive
   (list (read-shell-command "Shell command: " nil nil)))
  (shell-command (concat "echo "
                         (shell-quote-argument (read-passwd "[sudo] Password: "))
                         " | sudo -S "
                         command)))
#+end_src

Check if the provided filename matches the regex for git commit filenames
(e.g. =COMMIT_EDITMSG=).

#+begin_src emacs-lisp
(require 'git-commit)
(defun x8dcc/is-git-commit-filename (filename)
  "Returns t if FILENAME matches `git-commit-filename-regexp'."
  (string-match-p git-commit-filename-regexp filename))
#+end_src

Count the number of buffers whose name matches the specified regular expression.

#+begin_src emacs-lisp
(defun x8dcc/get-buffer-count (regexp)
  "Return the number of buffers whose name matches REGEXP."
  (length
   (seq-remove (lambda (buffer)
                 (not (string-match-p regexp
                                      (buffer-name buffer))))
               (buffer-list))))
#+end_src

Is this file really big? It will be used for disabling some modes. Credits
[[https://github.com/seagle0128/.emacs.d/blob/19efe194cabc2f2984e6463a8d9730d8163acd8f/lisp/init-funcs.el#L267-L271][seagle0128]].

#+begin_src emacs-lisp
(defun x8dcc/huge-file ()
  "Returns `t' if the current buffer has either too many characters (>500000),
or too many lines (>10000)."
  (or (> (buffer-size) 500000)
      (and (fboundp 'buffer-line-statistics)
           (> (car (buffer-line-statistics)) 10000))))
#+end_src

* Input
** Custom input functions

Delete the last /N/ words backwards, without adding it to the kill-ring (copying
it).

#+begin_src emacs-lisp
(defun x8dcc/backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))
#+end_src

This function indents the whole buffer, bound to =SPC b i=.

#+begin_src emacs-lisp
(defun x8dcc/indent-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max))))
#+end_src

It's common for me to use =org-insert-link= after typing a sentence ended in a
space, but when exiting evil's insert mode, the cursor moves on top of that last
space, inserting the link right after the last word. To fix this, this function
inserts a space right before inserting the link. We need to use
=funcall-interactively= so the =org-insert-link= function prompts us for a link
description.

TODO: Space is inserted even if you cancel in the =org-insert-link= prompt.

See [[*Org mode keybinds][Org mode keybinds]].

#+begin_src emacs-lisp
(defun x8dcc/org-insert-link ()
  "Inserts a space in the current position, and calls `org-insert-link'."
  (interactive)
  (insert " ")
  (funcall-interactively #'org-insert-link))
#+end_src

** Scrolling and motion

1. Scroll smoothly when cursor moves out of the screen (1 line at a time).
2. Don't accelerate scrolling.
3. Scroll window under mouse.
4. Scroll 2 lines at a time with mouse wheel, and scroll horizontally with shift.

#+begin_src emacs-lisp
(setq scroll-step 1
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse t
      mouse-wheel-scroll-amount '(3 ((shift) . hscroll)))
#+end_src

** Misc keybinds
*** Global

Zoom keybinds.

#+begin_src emacs-lisp
(keymap-global-set "C-+"            #'text-scale-increase)
(keymap-global-set "C--"            #'text-scale-decrease)
(keymap-global-set "C-<wheel-up>"   #'text-scale-increase)
(keymap-global-set "C-<wheel-down>" #'text-scale-decrease)
(keymap-global-set "C-<home>" (lambda () (interactive)
                                (text-scale-adjust 0)))
#+end_src

Quit from minibuffer with one ESC, instead of 3 ESCs or C-g.

#+begin_src emacs-lisp
(keymap-global-set "<escape>" #'keyboard-escape-quit)
#+end_src

Paste with =C-S-v=. Useful for the minibuffer (e.g. org links).

#+begin_src emacs-lisp
(keymap-global-set "C-S-v" #'yank)
#+end_src

Don't copy the last word with =C-<backspace>=, just delete them. See [[*Custom input functions][Custom input
functions]].

#+begin_src emacs-lisp
(keymap-global-set "C-<backspace>" #'x8dcc/backward-delete-word)
#+end_src

Map =S-<tab>= to vim's =<=. Could also use something like =indent-rigidly -4=. For
more settings related to indentation and =<tab>=, see [[*Misc mode settings][Misc mode settings]].

#+begin_src emacs-lisp
(keymap-global-set "<backtab>"
		           (lambda () (interactive)
		             ;; If there is a region active, use `evil-shift-left',
		             ;; otherwise shift the current line.
		             (if (use-region-p)
			             (evil-shift-left (region-beginning) (region-end))
		               (evil-shift-left-line 1))))
#+end_src

Remap evil's =:q= to =SPC b k.=

#+begin_src emacs-lisp
(keymap-global-set "<remap> <evil-quit>" #'kill-current-buffer)
#+end_src

Remap evil's =:wq= to =SPC b s= + =SPC b k=.

#+begin_src emacs-lisp
(keymap-global-set "<remap> <evil-save-and-close>"
                   (lambda () (interactive)
                     (basic-save-buffer)
                     (kill-current-buffer)))
#+end_src

*** Eshell

Better function for clearing than =recenter-top-bottom=.

#+begin_src emacs-lisp
(with-eval-after-load 'eshell
  (keymap-set eshell-mode-map "C-l" (lambda () (interactive)
                                      (eshell/clear-scrollback)
                                      (eshell-emit-prompt))))
#+end_src

*** Ediff

In the =ediff-control-buffer=, remap evil's =:q= to =ediff-quit=. We need to hook it
since =ediff-mode-map= is a buffer-local variable.

#+begin_src emacs-lisp
(with-eval-after-load 'ediff-util
  (add-hook 'ediff-startup-hook
            (lambda ()
              (keymap-set ediff-mode-map "<remap> <evil-quit>" #'ediff-quit))))
#+end_src

*** C mode

More "contextual" newlines in C mode. Inserts =comment-continue= when pressing =RET=
in comments, adds backslashes when pressing =RET= on macros, etc.

#+begin_src emacs-lisp
(with-eval-after-load 'cc-mode
  (add-hook 'c-mode-hook
            (lambda ()
              (keymap-set c-mode-map "RET" #'c-context-line-break))))
#+end_src

** Space keybinds

See also [[General][General]] package.

*** Global keybinds

These are the common keybinds between most major modes, the leader key is =SPC= in
normal modes, or =M-SPC= on non-normal modes.

#+begin_src emacs-lisp
(x8dcc/def-keys
  "SPC" '(projectile-find-file :wk "Find file in project") ;; Same as "SPC p f"
  "."   '(find-file            :wk "Find file")            ;; Same as "SPC f f"
  ;; Buffer
  "b"   '(:ignore t                        :wk "Buffer")
  "b i" '(x8dcc/indent-buffer              :wk "Indent")
  "b k" '(kill-current-buffer              :wk "Kill current")
  "b l" '(switch-to-buffer                 :wk "Switch to")
  "b L" '(buffer-menu                      :wk "List")
  "b s" '(basic-save-buffer                :wk "Save")
  "b S" '(write-file                       :wk "Save as")
  "b r" '(revert-buffer                    :wk "Revert (discard)")
  "b R" '(revert-buffer-with-coding-system :wk "Revert with coding system")
  "b x" '(scratch-buffer                   :wk "Open scratch buffer")
  ;; File
  "f"   '(:ignore t          :wk "File")
  "f c" '(compile            :wk "Compile")
  "f C" '(recompile          :wk "Re-compile")
  "f f" '(find-file          :wk "Find file")
  "f F" '(find-name-dired    :wk "Find wildcard recursively")
  "f o" '(ff-find-other-file :wk "Find other file")
  "f O" '(find-file-at-point :wk "Find file at point")
  "f r" '(recentf-open       :wk "Open recent")
  ;; Git
  "g"   '(:ignore t                 :wk "Git")
  "g c" '(magit-commit              :wk "Commit menu")
  "g e" '(magit-ediff-wdim          :wk "Ediff")
  "g f" '(magit-fetch               :wk "Fetch menu")
  "g F" '(magit-pull                :wk "Pull menu")
  "g g" '(magit-status              :wk "Magit status")
  "g G" '(vc-refresh-state          :wk "Refresh VC state")
  "g p" '(magit-push                :wk "Push menu")
  "g s" '(magit-stage-buffer-file   :wk "Stage current")
  "g u" '(magit-unstage-buffer-file :wk "Unstage current")
  ;; Help
  "h"   '(:ignore t               :wk "Help")
  "h c" '(describe-char           :wk "Describe char")
  "h e" '(view-echo-area-messages :wk "Echo area messages")
  "h f" '(describe-function       :wk "Describe function")
  "h F" '(describe-face           :wk "Describe face")
  "h i" '(info                    :wk "Open info")
  "h I" '(shortdoc                :wk "Open shortdoc")
  "h k" '(describe-key            :wk "Describe key")
  "h m" '(describe-mode           :wk "Describe mode")
  "h v" '(describe-variable       :wk "Describe variable")
  ;; Insert
  "i"   '(:ignore t               :wk "Insert")
  "i s" '(x8dcc/separator-comment :wk "Separator comment")
  ;; Jump
  "j"   '(:ignore t             :wk "Jump")
  "j i" '(consult-imenu         :wk "Imenu")
  "j x" '(xref-find-references  :wk "X-refs")
  "j d" '(xref-find-definitions :wk "Definitions")
  ;; Open
  "o"   '(:ignore t             :wk "Open")
  "o ." '(dired-jump            :wk "Dired")
  "o !" '(shell-command         :wk "Shell command")
  "o a" '(org-agenda            :wk "Org agenda")
  "o c" '(calc                  :wk "Calculator")
  "o C" '(quick-calc            :wk "Quick calculator")
  "o d" '(projectile-run-gdb    :wk "Debugger")
  "o e" '(x8dcc/eshell-popup    :wk "Eshell popup")
  "o E" '(x8dcc/eshell-numbered :wk "Eshell")
  "o m" '(man                   :wk "Manpage")
  ;; Project
  "p"   '(:ignore t                      :wk "Project")
  "p c" '(projectile-compile-project     :wk "Compile")
  "p C" '(projectile-repeat-last-command :wk "Re-compile")
  "p f" '(projectile-find-file           :wk "Find file")
  "p p" '(projectile-switch-project      :wk "Recent projects")
  "p r" '(projectile-recentf             :wk "Recent files")
  ;; Search
  "s"   '(:ignore t                    :wk "Search")
  "s e" '(spell-fu-goto-next-error     :wk "Next spelling error")
  "s E" '(spell-fu-goto-previous-error :wk "Previous spelling error")
  "s g" '(rgrep                        :wk "Recursive grep")
  "s h" '(highlight-regexp             :wk "Highlight")
  "s H" '(unhighlight-regexp           :wk "Unhighlight")
  "s o" '(occur                        :wk "Occurrences")
  "s r" '(query-replace                :wk "Replace interactively")
  "s R" '(query-replace-regexp         :wk "Replace regex")
  "s s" '(isearch-forward              :wk "I-search")
  "s S" '(isearch-forward-regexp       :wk "I-search regex")
  ;; Toggle
  "t"   '(:ignore t                          :wk "Toggle")
  "t b" '(big-font-mode                      :wk "Big font")
  "t c" '(display-fill-column-indicator-mode :wk "Fill column line")
  "t C" '(highlight-indent-guides-mode       :wk "Indent guides")
  "t f" '(variable-pitch-mode                :wk "Variable pitch font")
  "t i" '(toggle-case-fold-search            :wk "Case-sensitive searches")
  "t l" '(display-line-numbers-mode          :wk "Line numbers")
  "t L" '(hl-line-mode                       :wk "Highlight line")
  "t p" '(popper-toggle                      :wk "Last popup")
  "t P" '(popper-toggle-type                 :wk "Popup type")
  "t r" '(read-only-mode                     :wk "Read only")
  "t s" '(spell-fu-mode                      :wk "Spell checking")
  "t S" '(whitespace-mode                    :wk "Whitespace visualization")
  "t v" '(visible-mode                       :wk "Visible")
  "t w" '(toggle-truncate-lines              :wk "Line wrapping")
  "t W" '(auto-fill-mode                     :wk "Auto fill mode")
  "t z" '(writeroom-mode                     :wk "Zen mode")
  ;; Window
  "w"   '(:ignore t                    :wk "Window")
  "w c" '(evil-window-delete           :wk "Close")
  "w C" '(kill-buffer-and-window       :wk "Kill buffer and window")
  "w h" '(evil-window-left             :wk "Left")
  "w H" '(evil-window-move-far-left    :wk "Move current left")
  "w j" '(evil-window-down             :wk "Down")
  "w J" '(evil-window-move-very-bottom :wk "Move current down")
  "w k" '(evil-window-up               :wk "Up")
  "w K" '(evil-window-move-very-top    :wk "Move current up")
  "w l" '(evil-window-right            :wk "Right")
  "w L" '(evil-window-move-far-right   :wk "Move current right")
  "w s" '(evil-window-split            :wk "Split horizontally")
  "w v" '(evil-window-vsplit           :wk "Split vertically")
  "w w" '(evil-window-next             :wk "Next")
  ;; Fold
  "z"   '(:ignore t        :wk "Fold")
  "z a" '(evil-toggle-fold :wk "Toggle")
  "z c" '(evil-close-fold  :wk "Close")
  "z m" '(evil-close-folds :wk "Close all")
  "z o" '(evil-open-fold   :wk "Open")
  "z r" '(evil-open-folds  :wk "Open all"))
#+end_src

*** Org mode keybinds

Notes:
- Instead of =SPC m t=, you can use =S-<left>= and =S-<right>= to change the todo
  state.

See also:
- [[*Misc org keybinds][Misc org keybinds]].
- For more information on the =x8dcc/*= functions, see [[*General][General]] and
  [[*Custom input functions][Custom input functions]].

#+begin_src emacs-lisp
(x8dcc/def-keys-org
  ;; Insert
  "i h"   '(x8dcc/org-insert-header :wk "Default header")
  ;; Mode (Org)
  "m"     '(:ignore t                :wk "Org")
  "m i"   '(org-toggle-inline-images :wk "Toggle inline images")
  "m t"   '(org-todo                 :wk "Toggle todo")
  "m T"   '(org-babel-tangle         :wk "Tangle current file")
  ;; Org -> Date
  "m d"   '(:ignore t    :wk "Date")
  "m d d" '(org-deadline :wk "Deadline")
  "m d s" '(org-schedule :wk "Schedule")
  ;; Org -> Export
  "m e"   '(:ignore t                 :wk "Export")
  "m e a" '(org-ascii-export-to-ascii :wk "ASCII (text)")
  "m e h" '(org-html-export-to-html   :wk "HTML")
  "m e l" '(org-latex-export-to-latex :wk "LaTeX")
  "m e p" '(org-latex-export-to-pdf   :wk "PDF")
  ;; Org -> Link
  "m l"   '(:ignore t             :wk "Link")
  "m l l" '(x8dcc/org-insert-link :wk "Insert")
  "m l s" '(org-store-link        :wk "Store")
  ;; Org -> Priority
  "m p"   '(:ignore t         :wk "Priority")
  "m p d" '(org-priority-down :wk "Decrease")
  "m p p" '(org-priority      :wk "Insert")
  "m p u" '(org-priority-up   :wk "Increase"))
#+end_src

*** LaTeX mode keybinds

For more information on the =x8dcc/*= functions, see [[*General][General]],
[[*Custom input functions][Custom input functions]] and [[*LaTeX mode][LaTeX mode]].

#+begin_src emacs-lisp
(x8dcc/def-keys-latex
  ;; Mode (LaTeX)
  "m"     '(:ignore t           :wk "LaTeX")
  "m c"   '(x8dcc/latex-compile :wk "Compile to PDF")
  "m b"   '(latex-insert-block  :wk "Open block")
  "m B"   '(latex-close-block   :wk "Close block")
  ;; Text format
  "m f"   '(:ignore t                   :wk "Text format")
  "m f b" '(x8dcc/latex-font-bold       :wk "Bold")
  "m f c" '(x8dcc/latex-font-smallcaps  :wk "Smallcaps")
  "m f e" '(x8dcc/latex-font-emphasized :wk "Emphasized")
  "m f i" '(x8dcc/latex-font-italics    :wk "Italics")
  "m f r" '(x8dcc/latex-font-roman      :wk "Roman")
  "m f s" '(x8dcc/latex-font-slanted    :wk "Slanted")
  "m f t" '(x8dcc/latex-font-typewriter :wk "Typewriter"))
#+end_src

*** Lisp mode keybinds

Keybinds for =lisp-mode-map=, =emacs-lisp-mode-map=, =lisp-interaction-mode-map= and
=lisp-data-mode-map=.

For more information on the =x8dcc/*= functions, see [[*General][General]] and [[Custom functions][Custom functions]].

#+begin_src emacs-lisp
(x8dcc/def-keys-lisp
  ;; Evaluate
  "e"   '(:ignore t            :wk "Evaluate")
  "e e" '(eval-last-sexp       :wk "Last sexp")
  "e E" '(eval-print-last-sexp :wk "Print last sexp")
  "e b" '(eval-buffer          :wk "Current buffer")
  "e r" '(eval-region          :wk "Region"))
#+end_src

*** C mode keybinds

Keybinds for =c-mode-map=, =c++-mode-map=, =java-mode-map= and =js-mode-map=.

See also:
- [[*C mode][C mode]].
- For more information on the =x8dcc/*= functions, see [[*General][General]] and
  [[Custom functions][Custom functions]].

#+begin_src emacs-lisp
(x8dcc/def-keys-c
  ;; Buffer
  "b f" '(clang-format-buffer :wk "Format")
  ;; Mode (C)
  "m"   '(:ignore t                   :wk "C mode")
  "m d" '(x8dcc/beardbolt-disassemble :wk "Beardbolt disassemble")
  "m i" '(x8dcc/c-include-guard       :wk "Insert include guards")
  "m I" '(hide-ifdef-mode             :wk "Unused ifdefs")
  "m m" '(c-macro-expand              :wk "Expand macros in region"))
#+end_src

*** Message mode keybinds

Keybinds for =message-mode=.

See also:
- For more information on the =x8dcc/*= functions, see [[*General][General]] and
  [[Custom functions][Custom functions]].

#+begin_src emacs-lisp
(x8dcc/def-keys-message
  ;; Mode (C)
  "m"   '(:ignore t                       :wk "Message")
  "m e" '(mml-secure-message-sign-encrypt :wk "Sign and encrypt")
  "m p" '(mml-preview                     :wk "Preview")
  "m s" '(message-send                    :wk "Send")
  "m S" '(mml-secure-message-sign         :wk "Sign"))
#+end_src

* Modeline

Display line and column number on modeline, not just line.

#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

This function is used to justify elements of the modeline to the
left. *It's a bit unreliable, so it's currently unused.*

#+begin_src emacs-lisp
(defun x8dcc/mode-line-render (left right)
  "Return a string of `window-width' length. With LEFT and RIGHT justified
respectively."
  (let ((available-width
         (- (window-total-width)
            (+ (length (format-mode-line left))
               (length (format-mode-line right))))))
    (append left
            ;; (("%%%ds", 5) "") -> ("%5s", "") -> "     "
            (list (format (format "%%%ds" available-width) ""))
            right)))
#+end_src

This function will be used bellow to display the number of selected characters
and lines in the modeline in the following format: =(Sel 51 L4)=.

#+begin_src emacs-lisp
(defun x8dcc/mode-line-region-chars (prefix middle subfix)
  "If there are characters in the selection, return a string with the number of
characters and lines, between the PREFIX and SUBFIX. If the region takes up more
than one line, it will also display the MIDDLE argument right after the number
of characters, followed by the number of lines."
  (if (use-region-p)
      (let* ((start (region-beginning))
             (end   (region-end))
             (chars (abs (- end start)))
             (lines (abs (- (line-number-at-pos end)
                            (line-number-at-pos start)))))
        (concat prefix
                (number-to-string (+ chars 1))
                (if (> lines 0)
                    (concat middle (number-to-string (+ lines 1))))
                subfix))))
#+end_src

Set the modeline format itself. We need to use =setq-default= since it's
a buffer-local variable.

Note that the evil mode indicator is set inside the =:config= section of
the [[Evil & Evil collection][Evil]] package.

#+begin_src emacs-lisp
(setq-default mode-line-format
              '("%e  λ "
                mode-line-front-space
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                "  "
                mode-line-buffer-identification
                "  "
                mode-line-position
                (:eval (x8dcc/mode-line-region-chars "(Sel " " L" ") "))
                "  "
                mode-line-modes
                (vc-mode vc-mode)
                "  "
                mode-line-misc-info))
#+end_src

* Line numbers and line highlight

Style of line numbers. If set to =nil=, line numbers are disabled, =t= for
normal numbers and =relative= for relative line numbers.

If =display-line-numbers-width-start= is =t=, the width of the line
numbers will be calculated depending on the lines of each buffer.

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative
      display-line-numbers-width-start t)
#+end_src

Hide line numbers in the specified modes. For more information on
=x8dcc/x8dcc/hook-to-targets= see [[*Misc functions and macros][Misc functions and macros]].

#+begin_src emacs-lisp
(x8dcc/hook-to-targets (lambda () (display-line-numbers-mode 0))
                       '(eshell-mode-hook
                         doc-view-mode-hook
                         image-mode-hook
                         ;; Games
                         solitaire-mode-hook
                         mpuz-mode-hook
                         bubbles-mode-hook
                         gomoku-mode-hook
                         snake-mode-hook
                         tetris-mode-hook))
#+end_src

We will also highlight the current line in programming modes.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

We only want one active highlight line in the current window.

#+begin_src emacs-lisp
(setq hl-line-sticky-flag nil)
#+end_src

* Misc visual settings

By default, don't wrap lines, truncate them (=truncate-lines=). This can be
toggled with =SPC t w=, see [[Space keybinds][Space keybinds]].

Don't wrap lines using words by default (=global-visual-line-mode=).

#+begin_src emacs-lisp
(setq-default truncate-lines t)
(global-visual-line-mode 0)
#+end_src

Don't blink the cursor.

#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

Set 80 as the column line, with the specified character.

NOTE: Try using =?\u00A6= (=¦=) instead of =?\u2502= (=│=) if there are spaces
between lines.

#+begin_src emacs-lisp
(setq-default display-fill-column-indicator-character ?\u00A6
              fill-column 80)

(add-hook 'prog-mode-hook
          (lambda ()
            (display-fill-column-indicator-mode 1)))
#+end_src

Set monday as the first day of the week.

#+begin_src emacs-lisp
(setq org-agenda-start-on-weekday 1
      calendar-week-start-day 1
      org-agenda-weekend-days '(6 0)
      calendar-weekend-days '(6 0))
#+end_src

* Misc mode settings

Use UTF-8 as the default codification.

#+begin_src emacs-lisp
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8-unix)
#+end_src

Follow git symlinks by default.

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

Automatically update buffer if the file has changed on disk.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

Open files at last edited position. Persists across sessions.

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

Remember minibuffer history across sessions.

#+begin_src emacs-lisp
(savehist-mode 1)
#+end_src

Use spaces instead of tabs. Should be the default already.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

Use =#'indent-relative-first-indent-point= instead of =#'indent-relative= for more
intuitive indentation.

#+begin_src emacs-lisp
(setq-default indent-line-function #'indent-relative-first-indent-point)
#+end_src

Set =tab-always-indent= to =nil= instead of =t= so it inserts literal tabs (or spaces)
after trying to indent the line.

#+begin_src emacs-lisp
(setq tab-always-indent nil)
#+end_src

Don't highlight the region when the mark is active. Useful for using =C-x C-x=
after =query-replace=. Credits to comment in [[https://stackoverflow.com/a/14883058/11715554][StackOverflow answer]].

#+begin_src emacs-lisp
(transient-mark-mode 0)
#+end_src

Enable auto-closing of brackets with =electric-pair-mode=.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (electric-pair-mode 1)))
#+end_src

* Buffer save hooks

These variables and functions control whether or not my functions are allowed to
be called on a buffer save hook.

#+begin_src emacs-lisp
(defvar x8dcc/allow-modify-on-save t
  "If non-nil, allow the calling of functions that modify the buffer contents on
the save hooks.")

(defun x8dcc/toggle-modify-on-save ()
  "Toggle modifications on buffer save hooks. See `x8dcc/allow-modify-on-save'."
  (interactive)
  (setq x8dcc/allow-modify-on-save (not x8dcc/allow-modify-on-save))
  (if x8dcc/allow-modify-on-save
      (message "Buffer modifications enabled on save.")
    (message "Buffer modifications disabled on save.")))
#+end_src

If modifications are allowed, delete trailing whitespaces when saving the
buffer.

#+begin_src emacs-lisp
(add-hook 'before-save-hook
          (lambda ()
            (if x8dcc/allow-modify-on-save
                (delete-trailing-whitespace))))
#+end_src

* Backups

Emacs uses =file.txt~= files for backups, and =#file.txt#= for temporary
files. Having them in the same folder as the original file is not
ideal.

Change backup directory to =~/.emacs.d/trash/=. Note that we use =`( )=
instead of a normal quote to evaluate the =,( )= part.

We also set other variables to not de-link hard links
(=backup-by-copying=), use version numbers on backups (=version-control=),
deleting excess backups (=delete-old-versions=), and specifying the
number of versions to keep.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,(concat user-emacs-directory "trash"))))

(setq auto-save-file-name-transforms
      `((".*" ,(concat user-emacs-directory "trash") t)))

(setq backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

* Battery

Show battery in mode line. If the battery is "N/A" or "unknown", don't
display.

#+begin_src emacs-lisp
(with-eval-after-load 'battery
  (if (not (null battery-status-function))
      (let ((power-source (battery-format "%L" (funcall battery-status-function)))
            (power-status (battery-format "%B" (funcall battery-status-function))))
        (if (or (string= "N/A" power-source)
                (string= "unknown" power-source)
                (string= "N/A" power-status)
                (string= "unknown" power-status))
            (display-battery-mode 0)
          (display-battery-mode 1)))))

(require 'battery)
#+end_src

* Eshell

Change the eshell prompt.

The third parameter of =concat= is used to reset the font face after changing the
"λ" color. If we didn't do this, the text written by the user would be the same
color as the lambda. I don't really like this method, but I don't know any other
way of "resetting" the face.

We also need to set =eshell-prompt-regexp= to match our new prompt. This is
important so eshell knows what part of the line was the user input when
executing a previous command.

#+begin_src emacs-lisp
(setq eshell-prompt-function (lambda ()
                               (concat
                                (abbreviate-file-name (eshell/pwd))
                                (propertize " λ" 'face '(:foreground "#8490B3"))
                                (propertize " " 'face '(:inherit default))))
      eshell-prompt-regexp "^[^#λ]* [#λ] ")
#+end_src

Don't show duplicated entries in the eshell history.

#+begin_src emacs-lisp
(setq eshell-hist-ignoredups t)
#+end_src

This function is basically the same from =projectile-run-eshell= in
[[https://github.com/bbatsov/projectile/blob/0163b335a18af0f077a474d4dc6b36e22b5e3274/projectile.el#L4531-L4541][projectile.el]]. If we are in a project, it will open the shell in the project's
root. The difference is that if we are not, it will open =eshell= normally. It
also does not rename the buffer, so our =display-buffer-alist= rules still apply.

It will be used for =x8dcc/eshell-popup= and =x8dcc/eshell-numbered=.

#+begin_src emacs-lisp
(defun x8dcc/eshell-project-or-current (&optional eshell-func)
  "Run ESHELL-FUNC in the project's root whenever possible."
  (interactive)
  (unless eshell-func (setq eshell-func #'eshell))
  (if (projectile-project-p)
      (projectile-with-default-dir (projectile-acquire-root)
        (funcall eshell-func))
    (funcall eshell-func)))
#+end_src

This function will be used to open an eshell buffer by calling
=x8dcc/eshell-project-or-current=, but will append a counter to the buffer name
depending on the number of existing eshell buffers. This will /only/ be used when
opening eshell in the current frame (with =SPC o E=), since we only want to allow
one =*eshell-popup*=.

#+begin_src emacs-lisp
(defun x8dcc/eshell-numbered (&optional eshell-func)
  "Call `x8dcc/eshell-project-or-current' with ESHELL-FUNC. If this was not the
first *eshell* buffer, append the count to the buffer name.

Uses `x8dcc/get-buffer-count' for getting the number of eshell buffers."
  (interactive)
  (unless eshell-func (setq eshell-func #'eshell))
  (let* ((eshell-buffer-num (x8dcc/get-buffer-count "\\*eshell\\*"))
         (eshell-buffer-name (if (> eshell-buffer-num 0)
                                 (concat "*eshell* ["
                                         (number-to-string eshell-buffer-num)
                                         "]")
                               "*eshell*")))
    (x8dcc/eshell-project-or-current eshell-func)))
#+end_src

This function will be used to create an =eshell= buffer named =*eshell-popup*=. This
will be used for making different rules for normal and popup eshell buffers on
=display-buffer-alist=.

#+begin_src emacs-lisp
(defun x8dcc/eshell-popup (&optional buffer-name)
  "Create or open a popup eshell buffer.

Creates a new eshell buffer with the specified BUFFER-NAME, or
\"*eshell-popup*\" if omited. Depending on `projectile-project-p', it will call
`eshell' in the project root or in the current folder. Useful for setting
different rules in `display-buffer-alist'."
  (interactive)
  (unless buffer-name (setq buffer-name "*eshell-popup*"))
  (let ((eshell-buffer-name buffer-name))
    (x8dcc/eshell-project-or-current)))
#+end_src

If the buffer is called =*eshell-popup*=, open it in a side window, instead of
taking over the current window.

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*eshell-popup\\*"
               (display-buffer-in-side-window (side . bottom))))
#+end_src

* Dired

Change the =ls= flags used by dired.

#+begin_src emacs-lisp
(setq dired-listing-switches "-l --all --sort=version --group-directories-first --human-readable")
#+end_src

Allow dired to recursively copy and delete folders, after asking for confirmation.

#+begin_src emacs-lisp
(setq dired-recursive-copies  'top
      dired-recursive-deletes 'top)
#+end_src

* Ediff

Don't open a new frame for the =ediff= control panel.

#+begin_src emacs-lisp
(setq ediff-window-setup-function #'ediff-setup-windows-plain
      ediff-split-window-function #'split-window-horizontally)
#+end_src

* Search and replace

See also [[*Evil & Evil collection][Evil & Evil collection]].

You can set these to =nil= to enable permanent highlighting of the search.

#+begin_src emacs-lisp
(setq lazy-highlight-cleanup t
      lazy-highlight-initial-delay 2
      lazy-highlight-max-at-a-time nil)
#+end_src

We will allow scroll, and we will use whitespaces as a wildcard when searching,
similar to [[*Orderless][Orderless]].

#+begin_src emacs-lisp
(setq isearch-allow-scroll t
      search-whitespace-regexp ".{,10}")
#+end_src

We will display the match number out of the total I-search matches.

#+begin_src emacs-lisp
(setq isearch-lazy-count t
      lazy-count-prefix-format "(%s/%s) "
      lazy-count-subfix-format nil)
#+end_src

* ERC

Enable ERC features.

#+begin_src emacs-lisp
(require 'erc)
(require 'erc-log)
(require 'erc-stamp)
(require 'erc-track)
;(require 'erc-spelling)

(erc-log-enable)
(erc-stamp-enable)
(erc-track-enable)
;(erc-spelling-enable)
#+end_src

Add an [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][advice]] so =erc-tls= is called instead of =erc=.

#+begin_src emacs-lisp
(advice-add 'erc :override #'erc-tls)
#+end_src

General ERC settings.

#+begin_src emacs-lisp
(setq erc-nick           "x8dcc"
      erc-system-name    "x8dcc"
      erc-user-full-name "x8dcc"

      ;; Don't give away machine name
      erc-anonymous-login t
      ;; Don't reply to CTCP
      erc-disable-ctcp-replies t
      ;; Notify CTCP requests
      erc-paranoid t
      ;; Warn blank lines
      erc-warn-about-blank-lines t

      ;; Enable logging
      erc-enable-logging t
      ;; Directory for logs
      erc-log-channels-directory (concat user-emacs-directory "erc-log")
      ;; When to write logs
      erc-log-write-after-send t
      erc-log-write-after-insert t
      ;; Timestamps
      erc-stamp-mode t
      erc-hide-timestamps t

      ;; Hide joins/leaves/quits
      erc-hide-list '("JOIN" "PART" "QUIT")
      ;; Max line width
      erc-fill-column 100
      ;; Align usernames to col 20
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 15
      ;; Prompt at the bottom of the screen
      erc-scrolltobottom-mode t
      erc-input-line-position -1
      ;; Messages to mode-line
      erc-track-showcount t
      erc-track-exclude-list '("NICK" "JOIN" "PART" "QUIT" "333" "353")

      ;; Don't bury ERC buffers by default
      erc-join-buffer 'buffer
      ;; Kill buffers for channels after /part
      erc-kill-buffer-on-part t
      ;; Kill buffers for private queries after quitting the server
      erc-kill-queries-on-quit t
      ;; Kill buffers for server messages after quitting the server
      erc-kill-server-buffer-on-quit t)
#+end_src

Set prompt to buffer name.

#+begin_src emacs-lisp
(setq erc-prompt (lambda ()
                   (concat "[" (buffer-name) "]:")))
#+end_src

* Mail

Set SMTP encryption, server and port.

#+begin_src emacs-lisp
(setq smtpmail-stream-type 'ssl
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      send-mail-function 'smtpmail-send-it)
#+end_src

When sending mail, try to sign it with the sender's PGP key.

#+begin_src emacs-lisp
(setq mml-secure-openpgp-sign-with-sender t)
#+end_src

The following is needed so Emacs asks for GPG password in the minibuffer. I
needed it to avoid a =gpg= error when running [[*ERC][ERC]].

#+begin_src emacs-lisp
(setq epg-pinentry-mode 'loopback)
#+end_src

For your credentials, you will need to create =~/.authinfo.gpg=. Generate a GPG
key pair with:

#+begin_src bash
gpg --quick-generate-key "My Name <my@email.address>"
#+end_src

Then, add your credentials to =~/.authinfo= in the following format. Keep in mind
that =PASSWORD= is not the password you use to log-in to google, but an *App
password*. Create one [[https://myaccount.google.com/apppasswords][here]].

#+begin_src text
machine smtp.gmail.com login EMAIL password "PASSWORD" port 465
#+end_src

Then encrypt the file using =M-x epa-encrypt-file= or by running:

#+begin_src bash
gpg -c ~/.authinfo
#+end_src

You can then delete the original =~/.authinfo= file.

For more information, see [[https://www.emacswiki.org/emacs/GnusAuthinfo][EmacsWiki]].

* Org mode
** Basic org settings

Enable "<s TAB" completion.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

Org agenda location.

#+begin_src emacs-lisp
(let ((expanded-org-directory (expand-file-name "~/Sync/Org/")))
  (if (file-directory-p expanded-org-directory)
      (setq org-directory expanded-org-directory
            org-agenda-files (list (concat org-directory "agenda.org")))))
#+end_src

Specify the sound for timers.

#+begin_src emacs-lisp
(setq org-clock-sound (concat org-directory "my-media/notification.wav"))
#+end_src

Enable code block evaluation for the specified languages. Capitalization
matters.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((C . t)
                             (scheme . t)))
#+end_src

Disable footers in HTML exports.

#+begin_src emacs-lisp
(setq org-html-postamble nil
      org-export-time-stamp-file nil)
#+end_src

Use smart quotes when exporting to HTML or LaTeX.

#+begin_src emacs-lisp
(setq org-export-with-smart-quotes t)
#+end_src

Enable colored links in PDF exports.

#+begin_src emacs-lisp
(setq org-latex-hyperref-template
      "\\hypersetup{
          pdfauthor={%a},
          pdftitle={%t},
          pdfkeywords={%k},
          pdfsubject={%d},
          pdfcreator={%c},
          pdflang={%L},
          colorlinks=true
       }\n")
#+end_src

NOTE: You will probably need the following packages for exporting PDF files:

#+begin_src bash
# Arch:
sudo pacman -S extra/texlive-latex extra/texlive-latexextra extra/texlive-plaingeneric

# Gentoo (untested):
sudo emerge app-text/texlive dev-texlive/texlive-latex dev-texlive/texlive-latexextra texlive-plaingeneric
#+end_src

** Visual org settings

Org visual settings.

The two fontify variables are used to control the styles of code, quote and
verse blocks. The =org-hide-emphasis-markers= variable is used to hide the =*text*=
markers, and just display bold. The last two variables are set to make sure the
indentation acts natively inside source blocks.

#+begin_src emacs-lisp
(setq org-fontify-quote-and-verse-blocks t
      org-src-fontify-natively t
      org-hide-emphasis-markers t
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively t)
#+end_src

Set the default folding levels for org buffers.

#+begin_src emacs-lisp
(setq org-startup-folded "nofold")
#+end_src

Enable =org-indent-mode=, which hides leading '*' from titles.

Set =org-link-descriptive= to hide org links. This is changed by the
=org-toggle-link-display= function.

Disable =electric-pair-mode= pairing of '<', so we can use "<s TAB"
completion.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (org-indent-mode 1)
                           (setq org-link-descriptive 1)
                           (setq-local
                            electric-pair-inhibit-predicate
                            (lambda (c)
                              (if (char-equal c ?<)
                                  t
                                (electric-pair-default-inhibit c))))))
#+end_src

Show LaTeX entities and expressions in a different face.

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex entities))
#+end_src

Create an [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html][overlay]] for setting as invisible the commas that are used to escape
asterisks in org buffers. Credits to [[https://emacs.stackexchange.com/a/70127/40363][StackOverlow answer]].

NOTE: This is currently not called in any hook to avoid a performance impact.

#+begin_src emacs-lisp
(defun x8dcc/make-invisible (regex &optional group-num)
  "Make all ocurrences of REGEX invisible.

Searches all ocurrences of REGEX and adds them to an invisible overlay. If
GROUP-NUM is supplied, it will only add the N-th parentheses group of the regex
to the overlay."
  (interactive "sRegex: ")
  (unless group-num (setq group-num 0))
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward regex nil t)
      (let ((invisible-overlay (make-overlay (match-beginning group-num) (match-end group-num))))
        (overlay-put invisible-overlay 'invisible t)))))

;; NOTE: For hiding org commas, use:
;; (x8dcc/make-invisible "^\\s*\\(,\\)\\*" 1)
#+end_src

** Custom heading IDs

Automatically add the =CUSTOM_ID= property to all org headers. Huge credits to
[[https://writequit.org/articles/emacs-org-mode-generate-ids.html][Lee Hinman]] and [[https://protesilaos.com/][Protesilaos Stavrou]].

Since I want my custom ids to look similar to the headlines themselves, I
created this =headline-to-id= function. First, it converts the headline to
lowercase, then it removes the quotes, it replaces non-alphanumerical characters
with a single dash, and then removes any extra dashes from the start and enf of
the ID.

#+begin_src emacs-lisp
(defun x8dcc/org-headline-to-id (headline)
  "Converts an org-mode HEADLINE to a CUSTOM-ID dashed string. For example:
\"My test... =heading=\" would turn into \"my-test-heading\"."
  (setq headline (replace-regexp-in-string "\\(\"+\\|'+\\)" ""
                                           (downcase headline)))
  (setq headline (replace-regexp-in-string "[^[:alnum:]]+" "-"
                                           headline))
  (setq headline (replace-regexp-in-string "\\(^-+\\|-+$\\)" ""
                                           headline))
  headline)
#+end_src

Next, our =org-custom-id-get= function. It uses =x8dcc/org-headline-to-id= instead
of =org-id-new=. I also removed the call to =org-id-add-location=, since I don't use
=org-id-locations=.

#+begin_src emacs-lisp
(defun x8dcc/org-custom-id-get (&optional pom create)
  "Get the CUSTOM_ID property of the entry at point-or-marker POM.  If POM is
nil, refer to the entry at point. If the entry does not have a CUSTOM_ID, the
function returns nil. However, when CREATE is non nil, create a CUSTOM_ID if
none is present already.

In any case, the CUSTOM_ID of the entry is returned."
  (interactive)
  (org-with-point-at pom
    (let ((id (org-entry-get nil "CUSTOM_ID"))
          (headline (nth 4 (org-heading-components))))
      (cond
       ((and id (stringp id) (string-match "\\S-" id))
        id)
       (create
        (setq id (x8dcc/org-headline-to-id headline))
        (org-entry-put pom "CUSTOM_ID" id)
        id)))))
#+end_src

And add an interactive helper function for adding custom ids to all headlines in
the buffer if they don't already have one.

#+begin_src emacs-lisp
(defun x8dcc/org-custom-id-add-all ()
  "Add CUSTOM_ID properties to all headlines in the current file which do not
already have one. See `x8dcc/org-custom-id-get'."
  (interactive)
  (org-map-entries (lambda () (x8dcc/org-custom-id-get (point) 'create))))
#+end_src

** Org capture

Used to quickly store data using templates.

See section [[https://orgmode.org/manual/Template-elements.html][10.1.3.1 Template elements]] and [[https://orgmode.org/manual/Template-expansion.html][10.1.3.2 Template expansion]] of the
org manual for more information.

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("n" "Note" entry
         (file+headline "notes.org" "Notes")
         "* %T Note\n%?")
        ("s" "Selection" entry
         (file+headline "notes.org" "Selections")
         "* %T Selection from [[%F][%f]]\n%?\n#+begin_quote\n%i\n#+end_quote")))
#+end_src

** Org functions

Insert the default header for my ORG files.

#+begin_src emacs-lisp
(defun x8dcc/org-insert-header (&optional title)
  (interactive)
  (unless title
    (setq title (capitalize (file-name-base buffer-file-name))))
  (save-excursion
    (goto-char (point-min))
    (insert "#+TITLE: " title "\n"
            "#+AUTHOR: " user-full-name "\n"
            "#+OPTIONS: toc:2\n"
            "#+STARTUP: nofold\n")))
#+end_src

* LaTeX mode

Run the =LaTeX= command on the master file. Similar to =TeX-command-master=, but
doesn't prompt for a command.

Note that =LaTeX= has to be in =TeX-command-list= or the command will fail.

#+begin_src emacs-lisp
(defun x8dcc/latex-compile ()
  (interactive)
  (TeX-command "LaTeX" 'TeX-master-file))
#+end_src

These functions are used for formatting text with =SPC m f= you will probably need
the [[*AucTex][AucTex]] package, although you can just change the strings being passed to
=x8dcc/tex-get-font-key=.

#+begin_src emacs-lisp
(defun x8dcc/tex-get-font-key (key &optional font-list)
  "Find the font key in FONT-LIST for the font whose LaTeX command contains
KEY. Returns nil if the KEY is not found, or a valid font key that can be passed
to `TeX-font'. If FONT-LIST is nil, `TeX-font-list' is used."
  (unless font-list (setq font-list TeX-font-list))
  (let ((item (car font-list)))
    (cond ((string-match-p (regexp-quote key) (cadr item))
           (car item))
          ((cdr font-list)
           (x8dcc/tex-get-font-key key (cdr font-list)))
          (t nil))))

(defun x8dcc/latex-font-bold ()
  (interactive)
  (let ((key (x8dcc/tex-get-font-key "bf{")))
    (if key (TeX-font nil key))))
(defun x8dcc/latex-font-emphasized ()
  (interactive)
  (let ((key (x8dcc/tex-get-font-key "emph{")))
    (if key (TeX-font nil key))))
(defun x8dcc/latex-font-italics ()
  (interactive)
  (let ((key (x8dcc/tex-get-font-key "it{")))
    (if key (TeX-font nil key))))
(defun x8dcc/latex-font-roman ()
  (interactive)
  (let ((key (x8dcc/tex-get-font-key "rm{")))
    (if key (TeX-font nil key))))
(defun x8dcc/latex-font-smallcaps ()
  (interactive)
  (let ((key (x8dcc/tex-get-font-key "sc{")))
    (if key (TeX-font nil key))))
(defun x8dcc/latex-font-slanted ()
  (interactive)
  (let ((key (x8dcc/tex-get-font-key "sl{")))
    (if key (TeX-font nil key))))
(defun x8dcc/latex-font-typewriter ()
  (interactive)
  (let ((key (x8dcc/tex-get-font-key "tt{")))
    (if key (TeX-font nil key))))
#+end_src

This function, written by [[https://emacs.stackexchange.com/users/253/dan][Dan]] in [[https://emacs.stackexchange.com/a/3100/40363][this StackExchange answer]], indents =\item=
lines in =itemize=, =enumerate= and =description= environments in LaTeX. This is
specially useful when using my =x8dcc/indent-buffer= function.

#+begin_src emacs-lisp
(defun LaTeX-indent-item ()
  "Provide proper indentation for LaTeX \"itemize\",\"enumerate\", and
\"description\" environments.

  \"\\item\" is indented `LaTeX-indent-level' spaces relative to
  the the beginning of the environment.

  Continuation lines are indented either twice
  `LaTeX-indent-level', or `LaTeX-indent-level-item-continuation'
  if the latter is bound."
  (save-match-data
    (let* ((offset LaTeX-indent-level)
           (contin (or (and (boundp 'LaTeX-indent-level-item-continuation)
                            LaTeX-indent-level-item-continuation)
                       (* 2 LaTeX-indent-level)))
           (re-beg "\\\\begin{")
           (re-end "\\\\end{")
           (re-env "\\(itemize\\|\\enumerate\\|description\\)")
           (indent (save-excursion
                     (when (looking-at (concat re-beg re-env "}"))
                       (end-of-line))
                     (LaTeX-find-matching-begin)
                     (current-column))))
      (cond ((looking-at (concat re-beg re-env "}"))
             (or (save-excursion
                   (beginning-of-line)
                   (ignore-errors
                     (LaTeX-find-matching-begin)
                     (+ (current-column)
                        (if (looking-at (concat re-beg re-env "}"))
                            contin
                          offset))))
                 indent))
            ((looking-at (concat re-end re-env "}"))
             indent)
            ((looking-at "\\\\item")
             (+ offset indent))
            (t
             (+ contin indent))))))

(defcustom LaTeX-indent-level-item-continuation 4
  "*Indentation of continuation lines for items in itemize-like
environments."
  :group 'LaTeX-indentation
  :type 'integer)

(eval-after-load "latex"
  '(setq LaTeX-indent-environment-list
         (nconc '(("itemize" LaTeX-indent-item)
                  ("enumerate" LaTeX-indent-item)
                  ("description" LaTeX-indent-item))
                LaTeX-indent-environment-list)))
#+end_src

* C mode

Enable explicit tabs for C code (if not on beginning of line).

#+begin_src emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset tab-width
      c-tab-always-indent nil)
#+end_src

Use doxygen style for documentation comments.

#+begin_src emacs-lisp
(setq c-doc-comment-style 'doxygen)
#+end_src

When using the =SPC z i= keybind, also call =hide-ifdefs=.

#+begin_src emacs-lisp
(setq hide-ifdef-initially t
      hide-ifdef-lines t)
#+end_src

For using =ff-find-other-file=, search also in the specified include folders.

#+begin_src emacs-lisp
(with-eval-after-load 'find-file
  (setq-default ff-quiet-mode t)
  (dolist (path '("./include" ".."))
    (add-to-list 'cc-search-directories path)))
#+end_src

This function is useful for adding [[https://en.wikipedia.org/wiki/Include_guard][include guards]] to C headers.

#+begin_src emacs-lisp
(defun x8dcc/c-include-guard (&optional filename)
  (interactive)
  (unless filename
    (setq filename (file-name-base buffer-file-name)))
  (let ((macro-name (upcase (concat filename "_H_" ))))
    (save-excursion
      (goto-char (point-min))
      (insert "\n"
              "#ifndef " macro-name "\n"
              "#define " macro-name " 1\n")
      (goto-char (point-max))
      (insert "\n"
              "#endif /* " macro-name " */"))))
#+end_src

This wrapper enables [[*Beardbolt][beardbolt-mode]] in a C buffer and calls =beardbolt-compile=.

#+begin_src emacs-lisp
(defun x8dcc/beardbolt-disassemble ()
  (interactive)
  (beardbolt-mode 1)
  (call-interactively #'beardbolt-compile))
#+end_src

* GDB

Launch in the /Many Windows/ layout.

#+begin_src emacs-lisp
(setq gdb-many-windows t)
#+end_src

Restore previous windows when GDB stops.

#+begin_src emacs-lisp
(setq gdb-restore-window-configuration-after-quit 'if-gdb-many-windows)
#+end_src

* Compilation

Automatically scroll the output of compilation buffers, unless an error is
found.

#+begin_src emacs-lisp
(setq compilation-scroll-output 'first-error)
#+end_src

Automatically kill running compilation processes when running a new one, without
asking the user.

#+begin_src emacs-lisp
(setq compilation-always-kill t)
#+end_src
