#+TITLE: GNU Emacs Configuration
#+AUTHOR: 8dcc
#+OPTIONS: toc:nil
#+PROPERTY: header-args:emacs-lisp :tangle config.el

#+TOC: headlines 2

* COMMENT Meta

Wrap all =emacs-lisp= source blocks in =(benchmark-run ...)= for profiling the
configuration.

#+begin_src emacs-lisp
(replace-regexp (rx (group-n 1
                      "#+begin_src emacs-lisp"
                      (*? anything)
                      "\n")
                    (group-n 2 (*? anything))
                    (group-n 3 "\n#+end_src"))
                "\\1(benchmark-run\n\\2\n)\\3")
#+end_src

* Identification

Identification for GPG configuration, email, templates, etc.

#+begin_src emacs-lisp
(setq user-full-name "8dcc"
      user-mail-address "8dcc.git@gmail.com")
#+end_src

* Theme

Remove GUI bars.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

Use a separate Custom file for more readability. This will contain the
SHA-256 hash of the trusted themes, and other user changes. For more
information, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][50.1.4 Saving Customizations]] and
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][50.1.7 Custom Themes]].

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file)
#+end_src

Load my custom theme from =~/.emacs.d/themes/modux-vivendi-theme.el=.

#+begin_src emacs-lisp
(setq custom-theme-directory (concat user-emacs-directory "themes/"))
(load-theme 'modux-vivendi)
#+end_src

Disable emacs' startup message.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

Change the emacs splash screen image. This should not matter since
it's overwritten by dashboard.

#+begin_src emacs-lisp
(setq fancy-splash-image (concat user-emacs-directory "my-media/splash.png"))
#+end_src

* Fonts

Default font. Most of the =.bdf= files are in my [[https://github.com/8dcc/linux-dotfiles][linux-dotfiles]] repo.

#+begin_src emacs-lisp
(when (member "Dina" (font-family-list))
    (set-frame-font "Dina 8" t nil))
#+end_src

Fallback font for unicode. You can't specify =nil= there, it needs to be
='unicode=.

#+begin_src emacs-lisp
(when (member "Cozette" (font-family-list))
  (set-fontset-font t 'unicode "Cozette"))
#+end_src

Variable pitch and fixed pitch fonts.

#+begin_src emacs-lisp
(when (member "FreeSerif" (font-family-list))
  (set-face-attribute 'variable-pitch nil
                      :family "FreeSerif"
                      :height 110
                      :weight 'regular))

(when (member "Dina" (font-family-list))
  (set-face-attribute 'fixed-pitch nil
                      :family "Dina"))
#+end_src

* Packages
** Package managers

Bootstrap [[https://github.com/radian-software/straight.el][straight.el]], which will be used as a "back-end" for =use-package=. For
more information, see: [[https://web.archive.org/web/20230522053703/https://jeffkreeftmeijer.com/emacs-straight-use-package/][Link]].

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el"
                          user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
      (url-retrieve-synchronously
        "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Install [[https://github.com/jwiegley/use-package][use-package]] (through =straight.el=) for more convenience. Setting
=straight-use-package-by-default= tells use-package to always use straight.el to
install packages (instead of emacs' package.el), even without specifying
=:straight t=.

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
#+end_src

See also [[file:./straight/versions/default.el][versions/default.el]], the resulting [[https://github.com/radian-software/straight.el#configuration-reproducibility][lockfile]] of
=M-x straight-freeze-versions=.

** Diminish

For hiding minor modes from the modeline. We will be using =:diminish=
in a lot of =(use-package)= expressions, to hide those minor modes.

#+begin_src emacs-lisp
(use-package diminish
  :config
  (dolist (mode '(abbrev-mode
                  visual-line-mode))
    (diminish mode)))
#+end_src

** Evil & Evil collection

For vi-like keybinds. Some notes about the configuration:

- We have to set these variables *before* loading both =evil= and =evil-collection=
  packages.
- We have to set =evil-want-integration= and =evil-want-keybinding= for
  =evil-collection=.
- Configure split direction so new splits are opened to the bottom and to the
  right.
- We set the undo system to =undo-redo=.
- We disable evil's =C-i= jump, since it messes with Org's =TAB=. We will actually
  overwrite it below, in [[*Evil remaps][Evil remaps]]. See [[https://github.com/Somelauw/evil-org-mode][evil-org-mode]]'s README, but note that
  the =org-tab= function is now called =org-cycle=.
- We set =evil-jumps-cross-buffers= to =t= to allow =evil-jump-forward= and
  =evil-jump-backward= to change the buffer.
- We set =evil-mode-line-format= for displaying the evil mode before the buffer
  name. See also [[*Modeline][Modeline]].
- We will use I-search as evil's search module so it's consistent when using
  =query-replace= and commands like that (although some stuff like highlight
  persistence doesn't behave like in vim).
- We alias =forward-evil-word= to =forward-evil-symbol= and set
  =evil-symbol-word-search= so using =b= and =e= ignores =_= and =-= depending on the
  language's symbols.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-split-window-below t
        evil-vsplit-window-right t
        evil-undo-system #'undo-redo
        evil-want-C-i-jump nil
        evil-jumps-cross-buffers t
        evil-mode-line-format '(after . mode-line-frame-identification))
  :config
  (evil-select-search-module 'evil-search-module 'isearch)
  (defalias #'forward-evil-word #'forward-evil-symbol)
  (setq-default evil-symbol-word-search t)
  (evil-mode 1))
#+end_src

For using vi-like keybinds in other buffer types.

#+begin_src emacs-lisp
(use-package evil-collection
  :diminish evil-collection-unimpaired-mode
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help)
  (evil-collection-init))
#+end_src

** Vundo & Undo history

Instead of treating undo/redo as a linear sequence of changes, emacs treats undo
history as a branching tree of changes. This package allows you to visualize and
navigate this tree easily.

#+begin_src emacs-lisp
(use-package vundo)
#+end_src

Remember buffer undo history across sessions.

#+begin_src emacs-lisp
(use-package undohist
  :init
  (undohist-initialize)
  :config
  (setq undohist-ignored-files
        '("\\.gpg\\'"
          x8dcc/is-git-commit-filename
          file-remote-p)))
#+end_src

** General

Define our own =SPC= keybinds.

The =general-create-definer= macro is used to define our own =x8dcc/*= macro, which
will be used later for defining the keys more easily. We specify the states for
the keybinds (all except of evil's insert), we specify the keymaps (See
[[elisp:(describe-variable 'general-keymap-aliases)][general-keymap-aliases]]), and the prefix. We will use =SPC= as prefix for normal
modes, and =M-SPC= for other modes like /emacs/ or evil's /insert/. See also
=general-non-normal-states=.

For the main keybinds, see [[Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(defmacro x8dcc/general-create-definer (name keymaps)
  "Create a general definer named NAME for the specified KEYMAPS.

Used in normal, insert, visual and emacs states. The normal prefix is \"SPC\"
and the non-normal prefix is \"M-SPC\"."
  `(general-create-definer ,name
     :states '(normal insert visual emacs)
     :keymaps ,keymaps
     :prefix "SPC"
     :non-normal-prefix "M-SPC"))

(defun x8dcc/general-create-definers (alist)
  "Create definers for all elements of ALIST, using
`x8dcc/general-create-definer'."
  (dolist (element alist)
    ;; We need to use `eval' because macro arguments are not evaluated.
    ;; FIXME: Use a better approach than `eval' and `backquote'.
    (eval `(x8dcc/general-create-definer ,(car element)
                                         (quote ,(cdr element))))))

(use-package general
  :after evil
  :config
  (general-evil-setup t)
  (x8dcc/general-create-definers
   '((x8dcc/def-keys . override)
     (x8dcc/def-keys-org . org-mode-map)
     (x8dcc/def-keys-latex . LaTeX-mode-map)
     (x8dcc/def-keys-texinfo . Texinfo-mode-map)
     (x8dcc/def-keys-c . (c-mode-map
                          c++-mode-map
                          java-mode-map
                          js-mode-map))
     (x8dcc/def-keys-message . message-mode-map)
     (x8dcc/def-keys-rmail . rmail-mode-map)
     (x8dcc/def-keys-rmail-summary . rmail-summary-mode-map))))
#+end_src

** Which key

For the keybind completion menu. Press =C-x= and wait for about 1 second to
display a list of available keybinds.

#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t)
  (which-key-mode 1))
#+end_src

** Projectile

For managing projects.

#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :config
  (projectile-mode 1))
#+end_src

** Magit

You should not need a description for magit.

We change =magit-display-buffer-function= so the status window doesn't open as a
popup. For other available functions, see =C-h f magit-display-buffer- TAB=.

#+begin_src emacs-lisp
(use-package magit
  :hook ((git-commit-setup . evil-insert-state))
  :config
  (setq magit-diff-refine-hunk t
        magit-display-buffer-function
        #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Dashboard

A nice dashboard with recent files, recent projects, and org agenda.

#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-banner-logo-title "8dcc's Emacs"
        dashboard-startup-banner (concat user-emacs-directory
                                        "my-media/splash.png")
        dashboard-center-content t
        dashboard-show-shortcuts nil
        dashboard-set-footer nil
        dashboard-page-separator "\n\n"
        dashboard-items '((recents . 10)
                          (projects . 5)
                          (agenda . 10)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Vertico

Vertical completion for =M-x=, =find-file=, etc.

Use =vertico-reverse-mode= to show completion on top of minibuffer, and
not below it.

#+begin_src emacs-lisp
(use-package vertico
  :config
  (vertico-mode 1)
  (vertico-reverse-mode 1))
#+end_src

** Marginalia

For extra information on the minibuffer when using [[Vertico][vertico]].

#+begin_src emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode 1))
#+end_src

** Consult

For providing better completion buffers similar to [[Vertico][vertico]] (same author). This
doesn't just add the =consult-*= commands, but also replaces the vanilla
"completion" buffers in emacs.

We set =consult-preview-key= to the following list, so the preview isn't loaded
until 0.3 seconds have passed.

We set =completion-in-region-function= to =#'consult-completion-in-region= for
better completion in buffers like eshell. See [[https://github.com/minad/vertico#completion-at-point-and-completion-in-region][vertico readme]].

#+begin_src emacs-lisp
(use-package consult
  :config
  (setq consult-preview-key (list :debounce 0.5 'any))
  (setq completion-in-region-function
		(lambda (&rest args)
          (apply (if vertico-mode
					 #'consult-completion-in-region
                   #'completion--in-region)
				 args))))
#+end_src

** Orderless

Adds a better search completion to =completion-styles= (Used in =M-x=,
=find-file=, etc.)

#+begin_src emacs-lisp
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)))
#+end_src

** Dumb jump

Dumb jump is a backend for the =xref= Emacs command. It doesn't use a TAGS file or
any background processes. Instead, it uses grep-like tools. See also [[*Xref][Xref]].

Depends on =s=, =dash= and =popup= packages.

#+begin_src emacs-lisp
(use-package dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

** Popper

For converting less-important buffers into popups. They can be toggled
with =SPC t p=. See [[Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(use-package popper
  :config
  (setq popper-group-function #'popper-group-by-projectile
        popper-reference-buffers '(compilation-mode
                                   messages-buffer-mode
                                   help-mode
                                   occur-mode
								   man-mode
                                   "^\\*Warnings\\*"
                                   "^\\*Compile-Log\\*"
                                   "^\\*Backtrace\\*"
                                   "^\\*evil-registers\\*"
                                   "^\\*Apropos\\*"
                                   "^\\*scratch\\*"
                                   "^\\*Macroexpansion\\*"
                                   "^\\*xref\\*"))
  (let ((popper-mode-line-formatted (propertize " *POP* " 'face 'bold)))
    (setq popper-mode-line popper-mode-line-formatted))
  (popper-mode 1))
#+end_src

** COMMENT Highlight indentation

We will enable indentation guides in C mode by default. It can also be toggled
with =SPC t C=, see [[*Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(straight-use-package
 '(highlight-indent-guides
   :type git :host github :repo "getong/highlight-indent-guides"))
#+end_src

Use the same character as the fill column, and ignore the first indentation
level. Setting =highlight-indent-guides-auto-enabled= is necessary for changing
the face foreground.

#+begin_src emacs-lisp
(setq highlight-indent-guides-method 'character
      highlight-indent-guides-character ?\u00A6
      highlight-indent-guides-suppress-auto-error t
      highlight-indent-guides-auto-enabled nil)
#+end_src

This is the function for not highlighting the first level.

#+begin_src emacs-lisp
(defun x8dcc/indent-guide-highlighter (level responsive display)
  (if (> level 0)
      (highlight-indent-guides--highlighter-default level responsive display)))

(setq highlight-indent-guides-highlighter-function
      'x8dcc/indent-guide-highlighter)
#+end_src

Set a global keybind.

#+begin_src emacs-lisp
(x8dcc/def-keys "t C" '(highlight-indent-guides-mode :wk "Indent guides"))
#+end_src

** EMMS

Enable the /Emacs Multi-Media System/ (EMMS).

We add =--no-video= parameter for =mpv= so we can listen to YouTube videos.

Since =emms-volume-*= changes the volume of the whole system, I added =--volume=X=
to the =mpv= parameters, since it's always a bit loud by default.

We set =emms-mode-line-mode= to zero so it displays only the time instead of the
filename.

#+begin_src emacs-lisp
(use-package emms
  :config
  (emms-all)
  (setq emms-player-list '(emms-player-mpv
                           emms-player-vlc)
        emms-player-mpv-parameters '("--quiet"
                                     "--really-quiet"
                                     "--no-audio-display"
                                     "--no-video"
                                     "--volume=50"))
  (emms-mode-line-mode 0))
#+end_src

** Spelling

We will use the =spell-fu= package for basic spelling. I don't use any packages
for code completion or code syntax.

The package won't be enabled in Windows systems, since it depends on the =aspell=
command.

We will use both =en_US= and =es= dictionaries.

We also exclude a list of faces when using to avoid highlighting source code
blocks, tags, etc. This list was taken from the [[https://github.com/doomemacs/doomemacs/blob/a89d4b7df556bb8b309d1c23e0b60404e750f156/modules/checkers/spell/config.el#L85][doom emacs]] repository.

#+begin_src emacs-lisp
(unless (member system-type '(ms-dos windows-nt cygwin))
  (use-package spell-fu
    :hook ((text-mode erc-mode) . spell-fu-mode)
    :config
    (add-hook 'spell-fu-mode-hook
              (lambda ()
                (spell-fu-dictionary-add
                 (spell-fu-get-ispell-dictionary "en_US"))
                (spell-fu-dictionary-add
                 (spell-fu-get-ispell-dictionary "es"))))
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(font-lock-keyword-face
                        font-lock-function-name-face
                        font-lock-type-face
                        font-lock-variable-name-face
                        font-lock-warning-face
                        font-latex-sedate-face
                        font-latex-warning-face
                        font-latex-math-face))))
    (add-hook 'markdown-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(markdown-code-face
                        markdown-html-attr-name-face
                        markdown-html-attr-value-face
                        markdown-html-tag-name-face
                        markdown-inline-code-face
                        markdown-link-face
                        markdown-markup-face
                        markdown-plain-url-face
                        markdown-reference-face
                        markdown-url-face))))
    (add-hook 'org-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(org-block
                        org-block-begin-line
                        org-block-end-line
                        org-cite
                        org-cite-key
                        org-code
                        org-date
                        org-footnote
                        org-formula
                        org-inline-src-block
                        org-latex-and-related
                        org-link
                        org-meta-line
                        org-property-value
                        org-ref-cite-face
                        org-special-keyword
                        org-tag
                        org-todo
                        org-todo-keyword-done
                        org-todo-keyword-habt
                        org-todo-keyword-kill
                        org-todo-keyword-outd
                        org-todo-keyword-todo
                        org-todo-keyword-wait
                        org-verbatim))))))
#+end_src

** Move text

For dragging lines with =M-<down>= and =M-<up>=. I started using [[https://github.com/rejeep/drag-stuff.el][drag-stuff.el]], but
the code is full of errors that generate warnings and hasn't been updated in a
long time.

#+begin_src emacs-lisp
(straight-use-package
 '(move-text :type git :host github :repo "8dcc/move-text"))

(move-text-default-bindings)
(add-hook 'text-mode-hook #'move-text-mode)
(add-hook 'prog-mode-hook #'move-text-mode)
#+end_src

Drag stuff with =M-j= and =M-k=, not just with =M-<down>= and =M-<up>=.

#+begin_src emacs-lisp
(keymap-set move-text-mode-map "M-j" 'move-text-down)
(keymap-set move-text-mode-map "M-k" 'move-text-up)
#+end_src

** Highlight TODOs

Highlight common keywords inside =org-mode= and =prog-mode=. Added =DELME=
since I use that often.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode prog-mode LaTeX-mode) . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"))
#+end_src

** Rainbow mode

For displaying colors in the background of RGB strings.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook ((html-mode css-mode js-mode)  . rainbow-mode))
#+end_src

** Rainbow delimiters

Add rainbow colors to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode
          scheme-mode
          common-lisp-mode
          lisp-mode
          LaTeX-mode)
         . rainbow-delimiters-mode)
  :config
  (setq rainbow-delimiters-max-face-count 6))
#+end_src

** Highlight numbers

For highlighting numeric literals.

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook ((prog-mode . highlight-numbers-mode)))
#+end_src

** Clang format

For formatting C files. You can find my =.clang-format= in my [[https://github.com/8dcc/linux-dotfiles/tree/main/dotfiles/clang-format][8dcc/linux-dotfiles]]
repo.

#+begin_src emacs-lisp
(use-package clang-format
  :config
  (setq clang-format-style "file"))
#+end_src

** Htmlize

Required by =org-html-export-to-html=.

#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

** Git gutter fringe

Show git changes in the fringe.

First of all, we create a helper function for defining a fringe bitmap from a
width and a height. It will calculate the number needed for each row of the
bitmap from the /width/, make a list of /height/ elements, and turn it into a
vector. It will pass that, with the =name= and =alignment= to =define-fringe-bitmap=.

#+begin_src emacs-lisp
(defun x8dcc/set-lower-bits (n)
  "Return an integer with the N lower bits set."
  (- (ash 1 n) 1))

(defun x8dcc/fringe-helper-rect (name alignment w h)
  "Convert W and H to a bitmap array, and call `define-fringe-bitmap' with NAME
and ALIGNMENT as parameters."
  (define-fringe-bitmap name
    (apply #'vector
           (make-list h (x8dcc/set-lower-bits w)))
    nil nil alignment))
#+end_src

We then use our new =my-fringe-helper-rect= to specify the width and height of the
bitmap used in the fringe. It will be drawn with my theme's
=bg-[added/changed/removed]= faces, and with the default fringe background.

NOTE: For more information on creating the bitmaps easily with strings, see the
=fringe-helper-define= macro.

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config
  (x8dcc/fringe-helper-rect 'git-gutter-fr:added nil 3 30)
  (x8dcc/fringe-helper-rect 'git-gutter-fr:deleted nil 3 30)
  (x8dcc/fringe-helper-rect 'git-gutter-fr:modified nil 3 30)
  (global-git-gutter-mode 1))
#+end_src

** COMMENT Whiteroom mode

Great mode for distraction-free editing.

We set =writeroom-mode-line= to =nil=, change to =t= to display the modeline. We also
set =writeroom-restore-window-config=, which makes sense since it's going to
overwrite the window layout.

We use 81 for =writeroom-width= so our whole 80 char =fill-column= fits. We don't
use =(+ fill-column 1)= because we haven't set it yet. See [[Misc visual settings][Misc visual settings]].

We also remove =writeroom-set-fullscreen= from =writeroom-global-effects=, so the
emacs window doesn't get changed. We already disabled all the other menu bar
items in [[Theme][Theme]].

Lastly, we disable fringes in =writeroom-mode-enable-hook=, and re-enable them in
=writeroom-mode-disable-hook=. We could also increase and reset the font size from
these lambdas.

#+begin_src emacs-lisp
(use-package writeroom-mode
  :config
  (setq writeroom-mode-line nil
        writeroom-restore-window-config t
        writeroom-width 81
        writeroom-global-effects '(writeroom-set-alpha
                                   writeroom-set-menu-bar-lines
                                   writeroom-set-tool-bar-lines
                                   writeroom-set-vertical-scroll-bars
                                   writeroom-set-bottom-divider-width))
  (add-hook 'writeroom-mode-enable-hook (lambda ()
                                          (fringe-mode 0)))
  (add-hook 'writeroom-mode-disable-hook (lambda ()
                                           (fringe-mode nil)))
  (x8dcc/def-keys "t z" '(writeroom-mode :wk "Zen mode")))
#+end_src

** Evil lion (alignment)

Evil align operator, port of vim-lion by Tom McDonald.

#+begin_src emacs-lisp
(use-package evil-lion
  :config
  (setq evil-lion-left-align-key (kbd "g a"))
  (setq evil-lion-right-align-key (kbd "g A"))
  (evil-lion-mode))
#+end_src

** Big font

Personal package for toggling a bigger font face. Uses a =straight.el= recipe.

#+begin_src emacs-lisp
(straight-use-package
 '(big-font :type git :host github :repo "8dcc/big-font.el"))
#+end_src

And the settings.

#+begin_src emacs-lisp
(setq big-font-height 120
      big-font-family-alist '((default     . "Iosevka Comfy Fixed")
                              (fixed-pitch . "Iosevka Comfy Fixed")))
#+end_src

** Plumber

Personal package for plumbing text, similar to Plan9. See the [[https://github.com/8dcc/plumber.el][repository README]]
for more information.

#+begin_src emacs-lisp
(straight-use-package
 '(plumber :type git :host github :repo "8dcc/plumber.el"))
#+end_src

** AucTex

Essential package for LaTeX editing, comes with a useful preview mode.

#+begin_src emacs-lisp
(use-package auctex)
#+end_src

** COMMENT Ada mode

Major mode for programming in Ada.

Mainstream version is out of date.

#+begin_src emacs-lisp
(straight-use-package
 '(ada-mode :type git :host github :repo "tkurtbond/old-ada-mode"))
#+end_src

Since emacs 28, you need to manually add the mode to =auto-mode-alist=.

#+begin_src emacs-lisp
(mapc (lambda (element)
        (add-to-list 'auto-mode-alist (cons element 'ada-mode)))
      '("\\.gpr\\'" "\\.ada\\'" "\\.ads\\'" "\\.adb\\'"))
#+end_src

** COMMENT Graphviz dot mode

For editing [[https://graphviz.org/documentation/][Graphviz]]'s DOT language.

#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :config
  (setq graphviz-dot-indent-width 4))
#+end_src

** Guile Scheme

Use [[https://www.gnu.org/software/guile/][Guile]] as the default Scheme implementation for [[https://www.nongnu.org/geiser/][Geiser]].

#+begin_src emacs-lisp
(use-package geiser-guile)
#+end_src

** Nasm mode

Personal fork of [[https://github.com/skeeto/nasm-mode][skeeto/nasm-mode]] with some modified functionality.

#+begin_src emacs-lisp
(straight-use-package
 '(nasm-mode :type git :host github :repo "8dcc/nasm-mode"))
#+end_src

Use it as the default mode for =.asm= files. For more information on
=auto-mode-alist=, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html][Choosing File Modes]].

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.asm\\'"  . nasm-mode))
#+end_src

** C ElDoc

Display description of the function under the cursor. See =eldoc-mode=.

#+begin_src emacs-lisp
(use-package c-eldoc
  :hook ((c-mode . c-turn-on-eldoc-mode)))
#+end_src

** x86-lookup

Quickly jump to x86 documentation from Emacs. See [[https://github.com/skeeto/x86-lookup][skeeto/x86-lookup]].

#+begin_src emacs-lisp
(use-package x86-lookup
  :config
  (setq x86-lookup-pdf
        (concat user-emacs-directory "my-media/intel-sdm-vol2.pdf")
        x86-lookup-browse-pdf-function
        (lambda (pdf page)
          (start-process "firefox" nil "firefox"
                         (format "file://%s#page=%d" pdf page)))))
#+end_src

The volume 2 of the Intel SDM is included in this repository.

** Beardbolt

Personal fork of the [[https://github.com/joaotavora/beardbolt][beardbolt]] package for disassembling C/C++ code in Emacs.

- We set =beardbolt-shuffle-rainbow= to =t= increase contrast between blocks.
- We set =beardbolt-compile-delay= to =nil= to disable automatic recompilation on
  buffer change. Just call =x8dcc/beardbolt-disassemble= whenever needed with
  =SPC m d=.

#+begin_src emacs-lisp
(straight-use-package
 '(beardbolt :type git :host github :repo "8dcc/beardbolt"))

(setq beardbolt-shuffle-rainbow t
      beardbolt-compile-delay nil)
#+end_src

** Webpaste

Paste whole buffers or parts of buffers to several pastebin-like services.

#+begin_src emacs-lisp
(use-package webpaste
  :config
  (setq webpaste-provider-priority '("bpa.st" "dpaste.org" "gist.github.com")
        webpaste-paste-confirmation t))
#+end_src

* Custom functions and macros
** Auxiliary functions for Elisp

This function will be used for hooking a list of =functions= into the specified
=target=.

#+begin_src emacs-lisp
(defun x8dcc/hook-funcs (target functions)
  "Hook each function in FUNCTIONS to TARGET using `add-hook'."
  (dolist (func functions)
    (add-hook target func)))
#+end_src

This function is similar to =x8dcc/hook-funcs=, but it will be used for hooking a
*single function* to *each target* of the list.

#+begin_src emacs-lisp
(defun x8dcc/hook-to-targets (function targets)
  "Hook FUNCTION to each target in TARGETS using `add-hook'."
  (dolist (target targets)
    (add-hook target function)))
#+end_src

Define the specified key to the specified function, in all the specified
keymaps.

#+begin_src emacs-lisp
(defun x8dcc/keymaps-set (keymaps key func)
  "Define the KEY string to FUNC in every keymap in the KEYMAPS list."
  (defun eval-keymap (symbol-or-keymap)
    (if (keymapp symbol-or-keymap)
        symbol-or-keymap
      (eval symbol-or-keymap)))
  (dolist (keymap keymaps)
    (keymap-set (eval-keymap keymap) key func))
  func)
#+end_src

Define the specified keys in a specific keymap.

#+begin_src emacs-lisp
(defun x8dcc/keymap-set-alist (keymap key-alist)
  "Define the specified KEY-ALIST in a specific KEYMAP.

Each element in the KEY-ALIST list have the format (KEY . FUNC), and they
represent the first and second arguments of `keymap-set', respectively."
  (defun eval-function (symbol-or-function)
    (if (functionp symbol-or-function)
        symbol-or-function
      (function symbol-or-function)))
  (dolist (key-pair key-alist)
    (keymap-set keymap
                (car key-pair)
                (eval-function (cdr key-pair)))))
#+end_src

Replace an alist of regexps in a string.

#+begin_src emacs-lisp
(defun x8dcc/replace-regexps-in-string (alist string)
  "Return a copy of STRING with all the regexps in ALIST replaced.

Each element in the ALIST is a replacement with the form (REGEXP . REP), that
will be used for replacing with the `replace-regexp-in-string' function."
  (if (null alist)
      string
    (x8dcc/replace-regexps-in-string
     (cdr alist)
     (replace-regexp-in-string (caar alist)
                               (cdar alist)
                               string))))
#+end_src

Count the number of buffers whose name matches the specified regular expression.

#+begin_src emacs-lisp
(defun x8dcc/count-matching-buffers (regexp)
  "Return the number of buffers whose name matches REGEXP."
  (length
   (seq-remove (lambda (buffer)
                 (not (string-match-p regexp
                                      (buffer-name buffer))))
               (buffer-list))))
#+end_src

Is this file really big? It will be used for disabling some modes. Credits
[[https://github.com/seagle0128/.emacs.d/blob/19efe194cabc2f2984e6463a8d9730d8163acd8f/lisp/init-funcs.el#L267-L271][seagle0128]].

#+begin_src emacs-lisp
(defun x8dcc/is-huge-file ()
  "Returns `t' if the current buffer has either too many characters (>500000),
or too many lines (>10000)."
  (or (> (buffer-size) 500000)
      (and (fboundp 'buffer-line-statistics)
           (> (car (buffer-line-statistics)) 10000))))
#+end_src

Check if the provided filename matches the regex for git commit filenames
(e.g. =COMMIT_EDITMSG=).

#+begin_src emacs-lisp
(defconst x8dcc/git-commit-filename-regexp
  (rx "/"
      (or (seq (or (seq (or "COMMIT" "NOTES" "PULLREQ" "MERGEREQ" "TAG")
                        "_EDIT")
                   "MERGE_" "")
               "MSG")
          (seq (or "BRANCH" "EDIT")
               "_DESCRIPTION"))
      string-end)
  "Regexp for matching git commit filenames. Obtained from git-commit.el,
version 3.3.0.50.")

(defun x8dcc/is-git-commit-filename (filename)
  "Returns t if FILENAME matches `x8dcc/git-commit-filename-regexp'."
  (string-match-p x8dcc/git-commit-filename-regexp filename))
#+end_src

** Text manipulation

Insert a separator comment that fills up to the line column.

#+begin_src emacs-lisp
(defun x8dcc/separator-comment (&optional max-width)
  "Insert a separator comment in the next line based on `comment-start' and
`comment-end'."
  (interactive)
  (unless max-width
    (setq max-width fill-column))
  (let* ((start (string-trim comment-start))
         (end   (string-trim comment-end))
         (remaining (- max-width (+ (length start)
                                    (length end)))))
    (save-excursion
      (end-of-line)
      (insert "\n" start)
      (insert-char ?- remaining)
      (insert end))))
#+end_src

Increment number at point in decimal and hexadecimal format. Credits: [[https://www.emacswiki.org/emacs/IncrementNumber][EmacsWiki]].

#+begin_src emacs-lisp
(defun x8dcc/increment-number-at-point (&optional increment)
  "Increment the number at point by INCREMENT."
  (interactive "*p")
  (let ((pos (point)))
    (save-match-data
      (skip-chars-backward "0-9")
      (if (looking-at "[0-9]+")
          (let ((field-width (- (match-end 0) (match-beginning 0)))
                (newval (+ (string-to-number (match-string 0) 10) increment)))
            (when (< newval 0)
              (setq newval (+ (expt 10 field-width) newval)))
            (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                   newval)))
        (user-error "No number at point")))
    (goto-char pos)))

(defun x8dcc/increment-number-at-point-hex (&optional increment)
  "Increment the number forward from point by INCREMENT."
  (interactive "*p")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer hex-format)
        (setq inc-by (if increment increment 1))
        (skip-chars-backward "0123456789abcdefABCDEF")
        (when (re-search-forward "[0-9a-fA-F]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 16) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 16 field-width) answer)))
          (if (equal (match-string 0) (upcase (match-string 0)))
              (setq hex-format "X")
            (setq hex-format "x"))
          (replace-match (format (concat "%0" (int-to-string field-width)
                                         hex-format)
                                 answer)))))))
#+end_src

** Input-related functions

Delete the last /N/ words backwards, without adding it to the kill-ring (copying
it). Bound to =C-<backspace>=.

#+begin_src emacs-lisp
(defun x8dcc/backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point)
                 (save-excursion
                   (backward-word arg)
                   (point))))
#+end_src

Indent the whole buffer. Bound to =SPC b i=.

#+begin_src emacs-lisp
(defun x8dcc/indent-buffer ()
  "Indent the current buffer using `indent-region'."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max))))
#+end_src

Alternative to =kill-buffer-and-window= that uses =evil-window-delete=. Bound to
=SPC w C=.

#+begin_src emacs-lisp
(defun x8dcc/evil-kill-buffer-and-window ()
  "Kill the current buffer with `kill-current-buffer' and delete the current
window with `evil-delete-window'."
  (interactive)
  (kill-current-buffer)
  (evil-window-delete))
#+end_src

The following evil operator fills the specified text (usually the region) using
the indentation of the first line as reference. Bound to =g W=.

#+begin_src emacs-lisp
(evil-define-operator x8dcc/evil-fill-indent (beg end)
  "Fill text to `fill-column' using `evil-fill' and indent it with
`evil-indent'."
  :move-point nil
  :type line
  (save-excursion
    (goto-char beg)
    (let ((fill-column (- fill-column (current-indentation))))
      (indent-region beg end 0)
      (evil-fill beg end)
      (evil-indent beg end))))
#+end_src

** Visual functions

Create an overlay for hiding the specified regular expression. Originally meant
to hide Org's escape commas. Credits to [[https://emacs.stackexchange.com/a/70127/40363][StackOverlow answer]].

#+begin_src emacs-lisp
(defun x8dcc/make-invisible (regex &optional group-num)
  "Make all ocurrences of REGEX invisible.

Searches all ocurrences of REGEX and adds them to an invisible overlay. If
GROUP-NUM is supplied, it will only add the N-th parentheses group of the regex
to the overlay."
  (interactive "sRegex: ")
  (unless group-num (setq group-num 0))
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward regex nil t)
      (let ((invisible-overlay (make-overlay (match-beginning group-num)
                                             (match-end group-num))))
        (overlay-put invisible-overlay 'invisible t)))))

#+end_src

** New features

Toggle newline insertion when saving a file.

#+begin_src emacs-lisp
(defun x8dcc/toggle-final-newline ()
  "Toggle newline insertion when saving the current buffer. See
`require-final-newline'."
  (interactive)
  (setq-local require-final-newline (not require-final-newline))
  (if require-final-newline
      (message "Final newline enabled in the current buffer.")
    (message "Final newline disabled in the current buffer.")))
#+end_src

Run the specified command as root. See =shell-command= and =sudo(8)=. Note how the
password itself is not saved in the =shell-command-history= inside the
=~/.emacs.d/history= file, just the shell command is saved.

#+begin_src emacs-lisp
(defun x8dcc/sudo-shell-command (command)
"Run the specified shell command as root, asking for the sudo password in the
minibuffer. Only the shell command is saved in the history.

See also `shell-command'."
  (interactive
   (list (read-shell-command "Shell command: " nil nil)))
  (shell-command (concat "echo "
                         (shell-quote-argument (read-passwd "[sudo] Password: "))
                         " | sudo -S "
                         command)))
#+end_src

Switch between ='read= and ='rx= syntax for =re-builder=.

#+begin_src emacs-lisp
(defun x8dcc/reb-change-syntax (new-syntax)
  "Set `reb-re-syntax' to the specified value. When called interactively, switch
between `read' and `rx'."
  (interactive (list (if (equal reb-re-syntax 'read)
                         'rx
                       'read)))
  (message "Changed re-builder syntax to `%s'" new-syntax)
  (reb-change-syntax new-syntax))
#+end_src

Simple command for replacing base prefixes (=0x__=, =0o__= and =0b__=) before running
=quick-calc=.

#+begin_src emacs-lisp
(defconst x8dcc/quick-calc-replacements
  `((,(rx (or line-start space) "0x" (group not-newline)) . "16#\\1")
    (,(rx (or line-start space) "0o" (group not-newline)) . "8#\\1")
    (,(rx (or line-start space) "0b" (group not-newline)) . "2#\\1"))
  "Alist of regexp replacements that should be applied to the input when calling
`x8dcc/quick-calc'.")

(defun x8dcc/quick-calc (input)
  "Replace input according to `x8dcc/quick-calc-replacements', and call
`calc-do-quick-calc'."
  (interactive
   (list (read-string "Quick calc: " nil
                      'calc-quick-calc-history)))
  ;; TODO: Show different bases, like `quick-calc' does.
  (message
   (format "Result: %s"
           (calc-eval
            (x8dcc/replace-regexps-in-string x8dcc/quick-calc-replacements
                                             input)))))
#+end_src

#+RESULTS:
: x8dcc/quick-calc

* Input
** Scrolling and motion

1. Scroll smoothly when cursor moves out of the screen (1 line at a time).
2. Don't accelerate scrolling.
3. Scroll window under mouse.
4. Scroll 2 lines at a time with mouse wheel, and scroll horizontally with
   shift.

#+begin_src emacs-lisp
(setq scroll-step 1
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse t
      mouse-wheel-scroll-amount '(3 ((shift) . hscroll)))
#+end_src

** Misc remaps and tweaks
*** Global remaps

Zoom keybinds.

#+begin_src emacs-lisp
(keymap-global-set "C-+"            #'text-scale-increase)
(keymap-global-set "C--"            #'text-scale-decrease)
(keymap-global-set "C-<wheel-up>"   #'text-scale-increase)
(keymap-global-set "C-<wheel-down>" #'text-scale-decrease)
(keymap-global-set "C-<home>" (lambda () (interactive)
                                (text-scale-adjust 0)))
#+end_src

Quit from minibuffer with one ESC, instead of 3 ESCs or C-g.

#+begin_src emacs-lisp
(keymap-global-set "<escape>" #'keyboard-escape-quit)
#+end_src

Paste with =C-S-v=. Useful for the minibuffer (e.g. org links).

#+begin_src emacs-lisp
(keymap-global-set "C-S-v" #'yank)
#+end_src

Don't copy the last word with =C-<backspace>=, just delete them. See [[*Input-related functions][Input-related
functions]].

#+begin_src emacs-lisp
(keymap-global-set "C-<backspace>" #'x8dcc/backward-delete-word)
#+end_src

Map =S-<tab>= to vim's =<=. Could also use something like =indent-rigidly -4=. For
more settings related to indentation and =<tab>=, see [[*Indentation][Indentation]].

#+begin_src emacs-lisp
(keymap-global-set "<backtab>"
		           (lambda () (interactive)
		             ;; If there is a region active, use `evil-shift-left',
		             ;; otherwise shift the current line.
		             (if (use-region-p)
			             (evil-shift-left (region-beginning) (region-end))
		               (evil-shift-left-line 1))))
#+end_src

*** Evil remaps

Remap evil's =:q= to =SPC b k.=

#+begin_src emacs-lisp
(keymap-global-set "<remap> <evil-quit>" #'kill-current-buffer)
#+end_src

Remap evil's =:wq= to =SPC b s= + =SPC b k=.

#+begin_src emacs-lisp
(keymap-global-set "<remap> <evil-save-and-close>"
                   (lambda ()
                     (interactive)
                     (basic-save-buffer)
                     (kill-current-buffer)))
#+end_src

Disable evil's =Z Z=.

#+begin_src emacs-lisp
(keymap-global-set "<remap> <evil-save-modified-and-close>"
                   (lambda ()
                     (interactive)
                     (message "Ignoring quit keybind...")))
#+end_src

Bind my =x8dcc/evil-fill-indent= function to =g W=.

#+begin_src emacs-lisp
(dolist (state '(normal visual motion))
  (evil-global-set-key state (kbd "g W") #'x8dcc/evil-fill-indent))
#+end_src

By default, the =TAB= and =C-i= keys are the same. We make them independent so we
can set =evil-want-C-i-jump= to =t= without overwriting the =TAB= key. See [[*Evil & Evil collection][Evil & Evil
collection]]. Credits to wasamasa's [[https://depp.brause.cc/dotemacs/][dotemacs]].

#+begin_src emacs-lisp
(define-key input-decode-map [?\C-i]
            (lambda (prompt)
              (if (and (= (length (this-single-command-raw-keys)) 1)
                       (eql (aref (this-single-command-raw-keys) 0) ?\C-i)
                       (bound-and-true-p evil-mode)
                       (eq evil-state 'normal))
                  (kbd "<C-i>")
                (kbd "TAB"))))

(evil-global-set-key 'normal (kbd "<C-i>") #'evil-jump-forward)
#+end_src

*** Eshell remaps

Some keybind changes for =eshell-mode=.

- =C-l= :: Better function for clearing than =recenter-top-bottom=.
- =<home>= :: Go to the beginning of the line, but don't go past the prompt.

#+begin_src emacs-lisp
(with-eval-after-load 'eshell
  (x8dcc/keymap-set-alist
   eshell-mode-map
   '(("C-l" . (lambda () (interactive)
                (eshell/clear-scrollback)
                (eshell-emit-prompt)))
     ("<home>" . eshell-bol))))
#+end_src

*** Ediff remaps

In the =ediff-control-buffer=, remap evil's =:q= to =ediff-quit=. We need to hook it
since =ediff-mode-map= is a buffer-local variable.

#+begin_src emacs-lisp
(with-eval-after-load 'ediff-util
  (add-hook 'ediff-startup-hook
            (lambda ()
              (keymap-set ediff-mode-map
                          "<remap> <evil-quit>"
                          #'ediff-quit))))
#+end_src

*** C mode remaps

More "contextual" newlines in C mode. Inserts =comment-continue= when pressing =RET=
in comments, adds backslashes when pressing =RET= on macros, etc.

#+begin_src emacs-lisp
(with-eval-after-load 'cc-mode
  (keymap-set c-mode-map
              "RET"
              #'c-context-line-break))
#+end_src

** Space keybinds

For more information on the =x8dcc/*= functions, see [[*General][General]] and [[*Input-related functions][Input-related
functions]].

*** Global keybinds

These are the common keybinds between most major modes, the leader key is =SPC= in
normal modes, or =M-SPC= on non-normal modes.

NOTE: If packages are commented (as they should be, instead of removed), their
keybinds should be *moved* to their commented sub-sections.

#+begin_src emacs-lisp
(x8dcc/def-keys
  "SPC" '(projectile-find-file :wk "Find file in project") ; Same as "SPC p f"
  "."   '(find-file            :wk "Find file")            ; Same as "SPC f f"
  ;; Tab
  "TAB"           '(:ignore t    :wk "Tab")
  "TAB TAB"       '(tab-recent   :wk "Switch to recent")
  "TAB c"         '(tab-close    :wk "Close")
  "TAB l"         '(tab-switch   :wk "Switch to")
  "TAB n"         '(tab-new      :wk "New")
  "TAB r"         '(tab-rename   :wk "Rename")
  "TAB t"         '(tab-bar-mode :wk "Toggle bar display")
  "TAB <left>"    '(tab-previous :wk "Switch to previous")
  "TAB <right>"   '(tab-next     :wk "Switch to next")
  "TAB S-<right>" '(tab-move     :wk "Move right")
  ;; Buffer
  "b"         '(:ignore t                        :wk "Buffer")
  "b b"       '(previous-buffer                  :wk "Switch to previous")
  "b B"       '(next-buffer                      :wk "Switch to next")
  "b c"       '(revert-buffer-with-coding-system :wk "Revert with coding system")
  "b i"       '(x8dcc/indent-buffer              :wk "Indent")
  "b k"       '(kill-current-buffer              :wk "Kill current")
  "b l"       '(switch-to-buffer                 :wk "Switch to")
  "b L"       '(buffer-menu                      :wk "List")
  "b s"       '(basic-save-buffer                :wk "Save")
  "b S"       '(write-file                       :wk "Save as")
  "b r"       '(revert-buffer                    :wk "Revert (discard)")
  "b R"       '(rename-buffer                    :wk "Rename")
  "b <left>"  '(previous-buffer                  :wk "Switch to previous")
  "b <right>" '(next-buffer                      :wk "Switch to next")
  ;; Comment
  "c"   '(:ignore t      :wk "Comment")
  "c b" '(comment-box    :wk "Box")
  "c c" '(comment-dwim   :wk "DWIM")
  "c i" '(comment-indent :wk "Indent")
  "c l" '(comment-line   :wk "Line")
  "c r" '(comment-region :wk "Region")
  ;; Evaluate
  "e"   '(:ignore t        :wk "Evaluate")
  "e b" '(eval-buffer      :wk "Current buffer")
  "e e" '(eval-last-sexp   :wk "Last sexp")
  "e E" '(eval-expression  :wk "Expression")
  "e p" '(plumber-plumb    :wk "Plumb")
  "e P" '(plumber-plumb-as :wk "Plumb as")
  "e r" '(eval-region      :wk "Region")
  ;; File
  "f"   '(:ignore t          :wk "File")
  "f c" '(compile            :wk "Compile")
  "f C" '(recompile          :wk "Re-compile")
  "f d" '(diff               :wk "Diff")
  "f D" '(ediff              :wk "Ediff")
  "f f" '(find-file          :wk "Find file")
  "f F" '(find-name-dired    :wk "Find wildcard recursively")
  "f o" '(ff-find-other-file :wk "Find other file")
  "f O" '(find-file-at-point :wk "Find file at point")
  "f r" '(recentf-open       :wk "Open recent")
  ;; Git
  "g"   '(:ignore t                 :wk "Git")
  "g c" '(magit-commit              :wk "Commit menu")
  "g e" '(magit-ediff-wdim          :wk "Ediff")
  "g f" '(magit-fetch               :wk "Fetch menu")
  "g F" '(magit-pull                :wk "Pull menu")
  "g g" '(magit-status              :wk "Magit status")
  "g G" '(vc-refresh-state          :wk "Refresh VC state")
  "g p" '(magit-push                :wk "Push menu")
  "g s" '(magit-stage-buffer-file   :wk "Stage current")
  "g u" '(magit-unstage-buffer-file :wk "Unstage current")
  ;; Help
  "h"   '(:ignore t               :wk "Help")
  "h c" '(describe-char           :wk "Describe char")
  "h e" '(view-echo-area-messages :wk "Echo area messages")
  "h f" '(describe-function       :wk "Describe function")
  "h F" '(describe-face           :wk "Describe face")
  "h i" '(info                    :wk "Open info")
  "h I" '(shortdoc                :wk "Open shortdoc")
  "h k" '(describe-key            :wk "Describe key")
  "h l" '(find-library            :wk "Find library")
  "h m" '(describe-mode           :wk "Describe mode")
  "h v" '(describe-variable       :wk "Describe variable")
  ;; Insert
  "i"   '(:ignore t               :wk "Insert")
  "i c" '(insert-char             :wk "Character")
  "i s" '(x8dcc/separator-comment :wk "Separator comment")
  ;; Jump
  "j"   '(:ignore t             :wk "Jump")
  "j i" '(consult-imenu         :wk "Imenu")
  "j j" '(evil-jump-backward    :wk "Undo buffer jump")
  "j J" '(evil-jump-forward     :wk "Redo buffer jump")
  "j d" '(xref-find-definitions :wk "Definitions")
  "j x" '(xref-find-references  :wk "X-refs")
  ;; Mode
  "m"   '(:ignore t :wk "Mode")
  ;; Open
  "o"   '(:ignore t             :wk "Open")
  "o ." '(dired-jump            :wk "Dired")
  "o !" '(shell-command         :wk "Shell command")
  "o a" '(org-agenda            :wk "Org agenda")
  "o c" '(calc                  :wk "Calculator")
  "o C" '(quick-calc            :wk "Quick calculator")
  "o d" '(projectile-run-gdb    :wk "Debugger")
  "o e" '(x8dcc/eshell-popup    :wk "Eshell popup")
  "o E" '(x8dcc/eshell-numbered :wk "Eshell")
  "o m" '(man                   :wk "Manpage")
  "o M" '(compose-mail          :wk "Compose mail")
  "o x" '(scratch-buffer        :wk "Scratch buffer")
  ;; Project
  "p"   '(:ignore t                      :wk "Project")
  "p c" '(projectile-compile-project     :wk "Compile")
  "p C" '(projectile-repeat-last-command :wk "Re-compile")
  "p f" '(projectile-find-file           :wk "Find file")
  "p p" '(projectile-switch-project      :wk "Recent projects")
  "p r" '(project-query-replace-regexp   :wk "Replace regex (query)")
  ;; Search
  "s"   '(:ignore t                    :wk "Search")
  "s e" '(spell-fu-goto-next-error     :wk "Next spelling error")
  "s E" '(spell-fu-goto-previous-error :wk "Previous spelling error")
  "s g" '(rgrep                        :wk "Recursive grep")
  "s h" '(highlight-regexp             :wk "Highlight")
  "s H" '(unhighlight-regexp           :wk "Unhighlight")
  "s o" '(occur                        :wk "Occurrences")
  "s r" '(query-replace                :wk "Replace (query)")
  "s R" '(query-replace-regexp         :wk "Replace regex (query)")
  "s s" '(isearch-forward              :wk "I-search")
  "s S" '(isearch-forward-regexp       :wk "I-search regex")
  ;; Toggle
  "t"   '(:ignore t                          :wk "Toggle")
  "t b" '(big-font-mode                      :wk "Big font")
  "t c" '(display-fill-column-indicator-mode :wk "Fill column line")
  "t f" '(variable-pitch-mode                :wk "Variable pitch font")
  "t i" '(toggle-case-fold-search            :wk "Case-sensitive searches")
  "t l" '(display-line-numbers-mode          :wk "Line numbers")
  "t L" '(hl-line-mode                       :wk "Highlight line")
  "t p" '(popper-toggle                      :wk "Last popup")
  "t P" '(popper-toggle-type                 :wk "Popup type")
  "t r" '(read-only-mode                     :wk "Read only mode")
  "t s" '(spell-fu-mode                      :wk "Spell checking")
  "t S" '(whitespace-mode                    :wk "Whitespace visualization")
  "t v" '(visible-mode                       :wk "Visible mode")
  "t w" '(toggle-truncate-lines              :wk "Line wrapping")
  "t W" '(auto-fill-mode                     :wk "Auto fill mode")
  ;; Window
  "w"   '(:ignore t                         :wk "Window")
  "w c" '(evil-window-delete                :wk "Close")
  "w C" '(x8dcc/evil-kill-buffer-and-window :wk "Kill buffer and window")
  "w h" '(evil-window-left                  :wk "Left")
  "w H" '(evil-window-move-far-left         :wk "Move current left")
  "w j" '(evil-window-down                  :wk "Down")
  "w J" '(evil-window-move-very-bottom      :wk "Move current down")
  "w k" '(evil-window-up                    :wk "Up")
  "w K" '(evil-window-move-very-top         :wk "Move current up")
  "w l" '(evil-window-right                 :wk "Right")
  "w L" '(evil-window-move-far-right        :wk "Move current right")
  "w s" '(evil-window-split                 :wk "Split horizontally")
  "w v" '(evil-window-vsplit                :wk "Split vertically")
  "w w" '(evil-window-next                  :wk "Next")
  ;; Fold
  "z"   '(:ignore t        :wk "Fold")
  "z a" '(evil-toggle-fold :wk "Toggle")
  "z c" '(evil-close-fold  :wk "Close")
  "z m" '(evil-close-folds :wk "Close all")
  "z o" '(evil-open-fold   :wk "Open")
  "z r" '(evil-open-folds  :wk "Open all"))
#+end_src

*** Org mode keybinds

Instead of =SPC m t=, you can use =S-<left>= and =S-<right>= to change the todo state.

#+begin_src emacs-lisp
(x8dcc/def-keys-org
  ;; Mode (Org)
  "m T"   '(org-babel-tangle :wk "Tangle current file")
  ;; Mode -> Date
  "m d"   '(:ignore t    :wk "Date")
  "m d d" '(org-deadline :wk "Deadline")
  "m d s" '(org-schedule :wk "Schedule")
  ;; Mode -> Export
  "m e"   '(:ignore t                     :wk "Export")
  "m e a" '(org-ascii-export-to-ascii     :wk "ASCII (text)")
  "m e h" '(org-html-export-to-html       :wk "HTML")
  "m e l" '(org-latex-export-to-latex     :wk "LaTeX")
  "m e p" '(org-latex-export-to-pdf       :wk "PDF")
  "m e t" '(org-texinfo-export-to-texinfo :wk "Texinfo")
  ;; Mode -> Insert
  "m i"   '(:ignore t                  :wk "Insert")
  "m i d" '(x8dcc/skeleton-org-default :wk "Default header")
  "m i b" '(x8dcc/skeleton-org-blog    :wk "Blog header")
  ;; Mode -> Link
  "m l"   '(:ignore t             :wk "Link")
  "m l l" '(x8dcc/org-insert-link :wk "Insert")
  "m l s" '(org-store-link        :wk "Store")
  ;; Mode -> Priority
  "m p"   '(:ignore t         :wk "Priority")
  "m p d" '(org-priority-down :wk "Decrease")
  "m p p" '(org-priority      :wk "Insert")
  "m p u" '(org-priority-up   :wk "Increase")
  ;; Mode -> Toggle
  "m t"   '(:ignore t                :wk "Toggle")
  "m t i" '(org-indent-mode          :wk "Indent mode")
  "m t I" '(org-toggle-inline-images :wk "Inline images")
  "m t t" '(org-todo                 :wk "Todo"))
#+end_src

*** LaTeX mode keybinds

See [[*LaTeX mode][LaTeX mode]].

#+begin_src emacs-lisp
(x8dcc/def-keys-latex
  ;; Mode (LaTeX)
  "m c"   '(x8dcc/latex-compile       :wk "Compile to PDF (LaTeX)")
  "m b"   '(latex-insert-block        :wk "Open block")
  "m B"   '(latex-close-block         :wk "Close block")
  "m j"   '(LaTeX-find-matching-begin :wk "Jump to block start")
  "m J"   '(LaTeX-find-matching-end   :wk "Jump to block end")
  "m m"   '(TeX-insert-macro          :wk "Insert macro")
  "m p"   '(prettify-symbols-mode     :wk "Prettify symbols")
  "m s"   '(LaTeX-section             :wk "New section")
  ;; Text format
  "m f"   '(:ignore t                   :wk "Text format")
  "m f b" '(x8dcc/latex-font-bold       :wk "Bold")
  "m f c" '(x8dcc/latex-font-smallcaps  :wk "Smallcaps")
  "m f e" '(x8dcc/latex-font-emphasized :wk "Emphasized")
  "m f i" '(x8dcc/latex-font-italics    :wk "Italics")
  "m f r" '(x8dcc/latex-font-roman      :wk "Roman")
  "m f s" '(x8dcc/latex-font-slanted    :wk "Slanted")
  "m f t" '(x8dcc/latex-font-typewriter :wk "Typewriter")
  ;; Folding
  "m F"   '(:ignore t                :wk "Fold")
  "m F f" '(TeX-fold-dwim            :wk "DWIM")
  "m F b" '(TeX-fold-buffer          :wk "Fold buffer")
  "m F B" '(TeX-fold-clearout-buffer :wk "Unfold buffer"))
#+end_src

*** Texinfo mode keybinds

#+begin_src emacs-lisp
(x8dcc/def-keys-texinfo
  ;; Mode (Texinfo)
  "m c"   '(x8dcc/tex-compile      :wk "Compile to PDF (TeX)")
  "m b"   '(Texinfo-environment    :wk "Open block")
  "m B"   '(texinfo-insert-@end    :wk "Close block")
  "m j"   '(Texinfo-find-env-start :wk "Jump to block start")
  "m J"   '(Texinfo-find-env-end   :wk "Jump to block end"))
#+end_src

*** C mode keybinds

Keybinds for =c-mode-map=, =c++-mode-map=, =java-mode-map= and =js-mode-map=.

The =c-toggle-electric-state= function toggles =electric-indent-mode=, which is
responsible for indenting the current line on "electric characters" like =;=. We
could add keybinds for =subword-mode= and =c-toggle-comment-style=, but I don't find
that useful with my coding style. For more information on the C modeline
characters, see the =c-update-modeline= function.

See also [[*C mode][C mode]].

#+begin_src emacs-lisp
(x8dcc/def-keys-c
  ;; Buffer
  "b f"   '(clang-format-buffer :wk "Format")
  ;; Mode (C)
  "m d"   '(x8dcc/beardbolt-disassemble :wk "Beardbolt disassemble")
  "m m"   '(c-macro-expand              :wk "Expand macros in region")
  ;; Mode -> Toggle
  "m t"   '(:ignore t               :wk "Toggle")
  "m t a" '(c-toggle-auto-newline   :wk "Auto-newline")
  "m t e" '(eldoc-mode              :wk "ElDoc mode")
  "m t h" '(c-toggle-hungry-state   :wk "Hungry-delete-key")
  "m t I" '(hide-ifdef-mode         :wk "Unused ifdefs")
  "m t l" '(c-toggle-electric-state :wk "Electric indentation")
  ;; Mode -> Insert
  "m i"   '(:ignore t                        :wk "Insert")
  "m i h" '(x8dcc/skeleton-c-header          :wk "Header skeleton")
  "m i l" '(x8dcc/skeleton-c-license-comment :wk "License comment (GPL-3.0)")
  "m i s" '(x8dcc/skeleton-c-source          :wk "Source skeleton"))
#+end_src

*** Message mode keybinds

Keybinds for =message-mode=.

#+begin_src emacs-lisp
(x8dcc/def-keys-message
  ;; Mode (Message)
  "m a" '(mml-attach-file                 :wk "Attach file")
  "m c" '(message-yank-original           :wk "Cite original")
  "m e" '(mml-secure-message-sign-encrypt :wk "Sign and encrypt")
  "m p" '(mml-preview                     :wk "Preview")
  "m s" '(mml-secure-message-sign         :wk "Sign")
  "m S" '(message-send                    :wk "Send"))
#+end_src

*** Rmail mode keybinds

Keybinds for =rmail-mode=. See also [[*Receiving mail (Rmail)][Receiving mail]].

TODO: [[https://www.gnu.org/savannah-checkouts/gnu/emacs/manual/html_node/emacs/Rmail-Labels.html][Label management]] and [[https://www.gnu.org/software/emacs//manual/html_node/emacs/Rmail-Reply.html][forwarding]] if used.

#+begin_src emacs-lisp
(x8dcc/def-keys-rmail
  ;; Mode (Rmail)
  "m d" '(rmail-delete-forward             :wk "Delete and move forward")
  "m D" '(rmail-epa-decrypt                :wk "Decrypt")
  "m g" '(rmail-get-new-mail               :wk "Get new mail")
  "m i" '(rmail-input                      :wk "Input file")
  "m m" '(rmail-summary                    :wk "Summary")
  "m n" '(rmail-next-undeleted-message     :wk "Next non-deleted")
  "m N" '(rmail-next-message               :wk "Next")
  "m o" '(rmail-output                     :wk "Output to file")
  "m O" '(rmail-output-as-seen             :wk "Output to file (as seen)")
  "m p" '(rmail-previous-undeleted-message :wk "Previous non-deleted")
  "m P" '(rmail-previous-message           :wk "Previous")
  "m r" '(rmail-reply                      :wk "Reply")
  "m s" '(rmail-expunge-and-save           :wk "Expunge and save")
  "m u" '(rmail-undelete-previous-message  :wk "Undelete current or previous"))
#+end_src

And also for the =rmail-summary-mode=.

#+begin_src emacs-lisp
(x8dcc/def-keys-rmail-summary
  ;; Mode (Rmail summary)
  "m d" '(rmail-summary-delete-forward   :wk "Delete and move forward")
  "m g" '(rmail-summary-get-new-mail     :wk "Get new mail")
  "m i" '(rmail-summary-input            :wk "Input file")
  "m o" '(rmail-summary-output           :wk "Output to file")
  "m O" '(rmail-summary-output-as-seen   :wk "Output to file (as seen)")
  "m r" '(rmail-summary-reply            :wk "Reply")
  "m s" '(rmail-summary-expunge-and-save :wk "Expunge and save")
  "m u" '(rmail-summary-undelete         :wk "Undelete")
  "m U" '(rmail-summary-undelete-many    :wk "Undelete all"))
#+end_src

* General visual settings

** Modeline

Display line and column number on modeline, not just line.

#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

This function is used to justify elements of the modeline to the
left. *It's a bit unreliable, so it's currently unused.*

#+begin_src emacs-lisp
(defun x8dcc/mode-line-render (left right)
  "Return a string of `window-width' length. With LEFT and RIGHT justified
respectively."
  (let ((available-width
         (- (window-total-width)
            (+ (length (format-mode-line left))
               (length (format-mode-line right))))))
    (append left
            ;; (("%%%ds", 5) "") -> ("%5s", "") -> "     "
            (list (format (format "%%%ds" available-width) ""))
            right)))
#+end_src

This function will be used below to display the number of selected characters
and lines in the modeline in the following format: =(Sel 51 L4)=.

#+begin_src emacs-lisp
(defun x8dcc/mode-line-region-chars (prefix middle subfix)
  "If there are characters in the selection, return a string with the number of
characters and lines, between the PREFIX and SUBFIX. If the region takes up more
than one line, it will also display the MIDDLE argument right after the number
of characters, followed by the number of lines."
  (if (use-region-p)
      (let* ((start (region-beginning))
             (end   (region-end))
             (chars (abs (- end start)))
             (lines (abs (- (line-number-at-pos end)
                            (line-number-at-pos start)))))
        (concat prefix
                (number-to-string (+ chars 1))
                (if (> lines 0)
                    (concat middle (number-to-string (+ lines 1))))
                subfix))))
#+end_src

Set the modeline format itself. We need to use =setq-default= since it's
a buffer-local variable.

Note that the evil mode indicator is set inside the =:config= section of
the [[Evil & Evil collection][Evil]] package.

#+begin_src emacs-lisp
(setq-default mode-line-format
              '("%e  λ "
                mode-line-front-space
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                "  "
                mode-line-buffer-identification
                "  "
                mode-line-position
                (:eval (x8dcc/mode-line-region-chars "(Sel " " L" ") "))
                "  "
                mode-line-modes
                (vc-mode vc-mode)
                "  "
                mode-line-misc-info))
#+end_src

*** Battery

Show battery in mode line. If the battery is "N/A" or "unknown", don't
display.

#+begin_src emacs-lisp
(with-eval-after-load 'battery
  (if (not (null battery-status-function))
      (let ((power-source (battery-format
                           "%L" (funcall battery-status-function)))
            (power-status (battery-format
                           "%B" (funcall battery-status-function))))
        (if (or (string= "N/A" power-source)
                (string= "unknown" power-source)
                (string= "N/A" power-status)
                (string= "unknown" power-status))
            (display-battery-mode 0)
          (display-battery-mode 1)))))

(require 'battery)
#+end_src

** Line numbers and line highlight

Style of line numbers. If set to =nil=, line numbers are disabled, =t= for
normal numbers and =relative= for relative line numbers.

If =display-line-numbers-width-start= is =t=, the width of the line
numbers will be calculated depending on the lines of each buffer.

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative
      display-line-numbers-width-start t)
#+end_src

Hide line numbers in the specified modes. For more information on
=x8dcc/x8dcc/hook-to-targets= see [[*Auxiliary functions for Elisp][Auxiliary functions for Elisp]].

#+begin_src emacs-lisp
(x8dcc/hook-to-targets (lambda () (display-line-numbers-mode 0))
                       '(eshell-mode-hook
                         doc-view-mode-hook
                         image-mode-hook
                         ;; Games
                         solitaire-mode-hook
                         mpuz-mode-hook
                         bubbles-mode-hook
                         gomoku-mode-hook
                         snake-mode-hook
                         tetris-mode-hook))
#+end_src

We will also highlight the current line in programming modes.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

We only want one active highlight line in the current window.

#+begin_src emacs-lisp
(setq hl-line-sticky-flag nil)
#+end_src

** Fill column

Set 80 as the column line, with the specified character.

NOTE: Try using =?\u00A6= (=¦=) instead of =?\u2502= (=│=) if there are spaces
between lines.

#+begin_src emacs-lisp
(setq-default display-fill-column-indicator-character ?\u00A6
              fill-column 80)
#+end_src

Display the fill column by default in =prog-mode= and =LaTeX-mode=. Can be toggled
with =SPC t c=.

#+begin_src emacs-lisp
(x8dcc/hook-to-targets
 (lambda ()
   (display-fill-column-indicator-mode 1))
 '(prog-mode-hook
   TeX-mode-hook
   message-mode-hook))
#+end_src

** Misc visual settings

By default, don't wrap lines, truncate them (=truncate-lines=). This can be
toggled with =SPC t w=, see [[Space keybinds][Space keybinds]].

Don't wrap lines using words by default (=global-visual-line-mode=).

#+begin_src emacs-lisp
(setq-default truncate-lines t)
(global-visual-line-mode 0)
#+end_src

Don't blink the cursor.

#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

Show buffer boundaries.

#+begin_src emacs-lisp
(x8dcc/hook-to-targets
 (lambda ()
   (setq indicate-buffer-boundaries 'left))
 '(text-mode-hook
   prog-mode-hook))

(add-hook 'eshell-mode-hook
          (lambda ()
            (setq indicate-buffer-boundaries
                  '((top    . left)
                    (bottom . nil) ; Don't show bottom
                    (up     . left)
                    (down   . left)))))
#+end_src

Show trailing whitespaces.

#+begin_comment emacs-lisp
;; NOTE: Commented
(add-hook 'prog-mode-hook
          (lambda ()
            (setq show-trailing-whitespace t)))
#+end_comment

Don't allow commands like =grep= (that use =display-buffer=) to create new windows
for their output, while still allowing the user to use functions that create
windows explicitly (like =find-file-other-window=).

#+begin_src emacs-lisp
(setq display-buffer-base-action
      '(display-buffer-same-window))
#+end_src

* General settings

** Codification

Use UTF-8 as the default codification.

#+begin_src emacs-lisp
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8-unix)
#+end_src

** Session persistence

Open files at last edited position. Persists across sessions.

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

Remember minibuffer history across sessions.

#+begin_src emacs-lisp
(savehist-mode 1)
#+end_src

Save =erc-ignore-list= across sessions.

#+begin_src emacs-lisp
(add-to-list 'savehist-additional-variables 'erc-ignore-list)
#+end_src

** Backups

Emacs uses =file.txt~= files for backups, and =#file.txt#= for temporary
files. Having them in the same folder as the original file is not
ideal.

Change backup directory to =~/.emacs.d/trash/=. Note that we use =`( )=
instead of a normal quote to evaluate the =,( )= part.

We also set other variables to not de-link hard links
(=backup-by-copying=), use version numbers on backups (=version-control=),
deleting excess backups (=delete-old-versions=), and specifying the
number of versions to keep.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,(concat user-emacs-directory "trash"))))

(setq auto-save-file-name-transforms
      `((".*" ,(concat user-emacs-directory "trash") t)))

(setq backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

** Indentation

Use spaces instead of tabs. Should be the default already.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

Use =#'indent-relative-first-indent-point= instead of =#'indent-relative= for more
intuitive indentation.

#+begin_src emacs-lisp
(setq-default indent-line-function #'indent-relative-first-indent-point)
#+end_src

Set =tab-always-indent= to =nil= instead of =t= so it inserts literal tabs (or spaces)
after trying to indent the line.

#+begin_src emacs-lisp
(setq tab-always-indent nil)
#+end_src

** Mark and region

Don't highlight the region when the mark is active. Useful for using =C-x C-x=
after =query-replace=. Credits to comment in [[https://stackoverflow.com/a/14883058/11715554][StackOverflow answer]].

This would not be a feature I would want to have in vanilla Emacs, but since
[[*Evil & Evil collection][evil]]'s visual mode seems to activate the Transient Mark mode temporarily, it's
perfect for me. For more information on these Transient Mark mode "exceptions"
(e.g. setting region with the mouse or shift-selection), see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Disabled-Transient-Mark.html][Emacs manual]].

#+begin_src emacs-lisp
(transient-mark-mode 0)
#+end_src

** Search and replace

See also [[*Evil & Evil collection][Evil & Evil collection]].

You can set these to =nil= to enable permanent highlighting of the search.

#+begin_src emacs-lisp
(setq lazy-highlight-cleanup t
      lazy-highlight-initial-delay 2
      lazy-highlight-max-at-a-time nil)
#+end_src

We will allow scroll, and we will use whitespaces as a wildcard when searching,
similar to [[*Orderless][Orderless]].

#+begin_src emacs-lisp
(setq isearch-allow-scroll t
      search-whitespace-regexp ".{,10}")
#+end_src

We will display the match number out of the total I-search matches.

#+begin_src emacs-lisp
(setq isearch-lazy-count t
      lazy-count-prefix-format "(%s/%s) "
      lazy-count-subfix-format nil)
#+end_src

** Tabs

Only show the tab bar if there are more than one tabs open.

#+begin_src emacs-lisp
(setq tab-bar-show 1)
#+end_src

** On buffer save

These variables and functions control whether or not my functions are allowed to
be called on a buffer save hook.

#+begin_src emacs-lisp
(defvar x8dcc/allow-modify-on-save t
  "If non-nil, allow the calling of functions that modify the buffer contents on
the save hooks.")

(defun x8dcc/toggle-modify-on-save ()
  "Toggle modifications on buffer save hooks. See `x8dcc/allow-modify-on-save'."
  (interactive)
  (setq x8dcc/allow-modify-on-save (not x8dcc/allow-modify-on-save))
  (if x8dcc/allow-modify-on-save
      (message "Buffer modifications enabled on save.")
    (message "Buffer modifications disabled on save.")))
#+end_src

If modifications are allowed, delete trailing whitespaces when saving the
buffer.

#+begin_src emacs-lisp
(add-hook 'before-save-hook
          (lambda ()
            (if x8dcc/allow-modify-on-save
                (delete-trailing-whitespace))))
#+end_src

** Printing
*** System printing configuration

These are the necessary Gentoo packages for printing.

#+begin_src bash
# For the `lpr' command
emerge net-print/cups net-print/cups-filters

# For HP printers
PYTHON_TARGETS="python3_11" PYTHON_SINGLE_TARGET="python3_11" emerge net-print/hplip
#+end_src

The =cupsd= service has to be running for printing. These commands are for Gentoo,
which uses OpenRC as its init system.

#+begin_src bash
# Start it for this session
rc-service cupsd start

# Add to the default group (auto-start on boot)
rc-update add cupsd default
#+end_src

You can configure the printer(s) from the web interface at [[http://localhost:631/]]

For more information, see [[https://wiki.gentoo.org/wiki/Printing][the printing page of the Gentoo wiki]].

*** Emacs printing configuration

Name of the default printer. Will be used for =lpr='s =-P= parameter.

#+begin_src emacs-lisp
(setq printer-name "MainPrinter")
#+end_src

You don't need to set the default printer from Emacs, you can just set the
default printer system-wise with =lpoptions=.

#+begin_src bash
lpoptions -d "MY_PRINTER_NAME"
#+end_src

Wrapper for printing only the specified pages of a buffer using =lpr-buffer=. See
[[http://localhost:631/help/options.html?TOPIC=Getting+Started&QUERY=#PAGERANGES][localhost CUPS help]] on the =page-ranges= option.

#+begin_src emacs-lisp
(defun x8dcc/lpr-buffer-pages (start end)
  "Print the current buffer using `lpr-buffer' from page START to END. The page
numbers start at 1."
  (interactive "nStarting page: \nnEnd page: ")
  (let ((lpr-switches (list "-o" (format "page-ranges=%d-%d"
                                         (max start 1) (max end 1)))))
    (lpr-buffer)))
#+end_src

TODO: The [[https://man.cx/a2ps][a2ps]] command might be worth checking for font sizes and other
settings.

** Misc general settings

Automatically update buffer if the file has changed on disk.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

Also automatically update Version Control info.

#+begin_src emacs-lisp
(setq auto-revert-check-vc-info t)
#+end_src

Follow git symlinks by default.

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

Set default browser.

#+begin_src emacs-lisp
(setq browse-url-generic-program "firefox")
#+end_src

Enable auto-closing of brackets with =electric-pair-mode=.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (electric-pair-mode 1)))
#+end_src

Set monday as the first day of the week.

#+begin_src emacs-lisp
(setq calendar-week-start-day 1
      calendar-weekend-days '(6 0))
#+end_src

* Mode-specific settings
** Eshell

Don't show duplicated entries in the eshell history.

#+begin_src emacs-lisp
(setq eshell-hist-ignoredups t)
#+end_src

The default =tab-width= is overwritten in =esh-mode.el=.

TODO: Instead of hardcoding "4" again, set it to the global value directly,
somehow.

#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook
          (lambda ()
            (setq-local tab-width 4)))
#+end_src

Change the eshell prompt.

The third parameter of =concat= is used to reset the font face after changing the
"λ" color. If we didn't do this, the text written by the user would be the same
color as the lambda. I don't really like this method, but I don't know any other
way of "resetting" the face.

We also need to set =eshell-prompt-regexp= to match our new prompt. This is
important so eshell knows what part of the line was the user input when
executing a previous command.

#+begin_src emacs-lisp
(setq eshell-prompt-function (lambda ()
                               (concat
                                (abbreviate-file-name (eshell/pwd))
                                (propertize " λ" 'face '(:foreground "#8490B3"))
                                (propertize " " 'face '(:inherit default))))
      eshell-prompt-regexp "^[^#λ]* [#λ] ")
#+end_src

This function is basically the same from =projectile-run-eshell= in
[[https://github.com/bbatsov/projectile/blob/0163b335a18af0f077a474d4dc6b36e22b5e3274/projectile.el#L4531-L4541][projectile.el]]. If we are in a project, it will open the shell in the project's
root. The difference is that if we are not, it will open =eshell= normally. It
also does not rename the buffer, so our =display-buffer-alist= rules still apply.

It will be used for =x8dcc/eshell-popup= and =x8dcc/eshell-numbered=.

#+begin_src emacs-lisp
(defun x8dcc/eshell-project-or-current (&optional eshell-func)
  "Run ESHELL-FUNC in the project's root whenever possible."
  (interactive)
  (unless eshell-func (setq eshell-func #'eshell))
  (if (projectile-project-p)
      (projectile-with-default-dir (projectile-acquire-root)
        (funcall eshell-func))
    (funcall eshell-func)))
#+end_src

This function will be used to open an eshell buffer by calling
=x8dcc/eshell-project-or-current=, but will append a counter to the buffer name
depending on the number of existing eshell buffers. This will /only/ be used when
opening eshell in the current frame (with =SPC o E=), since we only want to allow
one =*eshell-popup*=.

#+begin_src emacs-lisp
(defun x8dcc/eshell-numbered (&optional eshell-func)
  "Call `x8dcc/eshell-project-or-current' with ESHELL-FUNC. If this was not the
first *eshell* buffer, append the count to the buffer name.

Uses `x8dcc/count-matching-buffers' for getting the number of eshell buffers."
  (interactive)
  (unless eshell-func (setq eshell-func #'eshell))
  (let* ((eshell-buffer-num (x8dcc/count-matching-buffers "\\*eshell\\*"))
         (eshell-buffer-name (if (> eshell-buffer-num 0)
                                 (concat "*eshell* ["
                                         (number-to-string eshell-buffer-num)
                                         "]")
                               "*eshell*")))
    (x8dcc/eshell-project-or-current eshell-func)))
#+end_src

This function will be used to create an =eshell= buffer named =*eshell-popup*=. This
will be used for making different rules for normal and popup eshell buffers on
=display-buffer-alist=.

#+begin_src emacs-lisp
(defun x8dcc/eshell-popup (&optional buffer-name)
  "Create or open a popup eshell buffer.

Creates a new eshell buffer with the specified BUFFER-NAME, or
\"*eshell-popup*\" if omited. Depending on `projectile-project-p', it will call
`eshell' in the project root or in the current folder. Useful for setting
different rules in `display-buffer-alist'."
  (interactive)
  (unless buffer-name (setq buffer-name "*eshell-popup*"))
  (let ((eshell-buffer-name buffer-name))
    (x8dcc/eshell-project-or-current)))
#+end_src

If the buffer is called =*eshell-popup*=, open it in a side window, instead of
taking over the current window.

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*eshell-popup\\*"
               (display-buffer-in-side-window (side . bottom))))
#+end_src

** Dired

Change the =ls= flags used by Dired.

#+begin_src emacs-lisp
(setq dired-listing-switches
      "-l --all --sort=version --group-directories-first --human-readable")
#+end_src

Allow Dired to recursively copy and delete folders, after asking for
confirmation.

#+begin_src emacs-lisp
(setq dired-recursive-copies  'top
      dired-recursive-deletes 'top)
#+end_src

Don't create a new Dired buffer for each directory. Note that if you have a
Dired buffer in two windows and you change directory in one window, the other
will /not/ change.

#+begin_src emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

Auto-revert Dired buffers when the contents change. Also enabled for buffers in
[[*Misc general settings][Misc general settings]].

#+begin_src emacs-lisp
(setq dired-auto-revert-buffer t)
#+end_src

** Ediff

Don't open a new frame for the =ediff= control panel.

#+begin_src emacs-lisp
(setq ediff-window-setup-function #'ediff-setup-windows-plain
      ediff-split-window-function #'split-window-horizontally)
#+end_src

** Xref

Show a [[*Consult][consult]] popup in functions like =xref-find-definitions= and
=xref-find-references=, instead of creating their own =*xref*= buffers.

#+begin_src emacs-lisp
(setq xref-show-definitions-function #'consult-xref
      xref-show-xrefs-function #'consult-xref)
#+end_src

Don't ask for the symbol we are looking for every time, only when it has no
choice.

#+begin_src emacs-lisp
(setq xref-prompt-for-identifier nil)
#+end_src

** ERC
*** ERC modules

Enable ERC features:
- [[https://www.emacswiki.org/emacs/ErcLogging][Log]] is used for logging messages to files, configured below.
- [[https://www.emacswiki.org/emacs/ErcStamp][Stamp]] is used for showing timestamps, configured below.
- [[https://www.emacswiki.org/emacs/ErcChannelTracking][Track]] is used for keeping track of non-visible channels (e.g. modeline
  notifications).
- [[https://www.gnu.org/software/emacs/manual/html_node/erc/SASL.html][SASL]] will be used for logging into /some/ servers. It's enabled when necessary
  from =x8dcc/erc-launch=, defined below.

#+begin_src emacs-lisp
(require 'erc)
(add-to-list 'erc-modules 'log)
(add-to-list 'erc-modules 'stamp)
(add-to-list 'erc-modules 'track)
(erc-update-modules)
#+end_src

*** ERC log-in security settings (TLS/SASL)

Custom function for launching ERC. It will check if it should connect to the
specified server using [[https://www.gnu.org/software/emacs/manual/html_node/erc/Connecting.html#index-erc_002dtls][TLS]] or [[https://www.gnu.org/software/emacs/manual/html_node/erc/SASL.html][SASL]]. When called interactively, uses 6697 as the
port and the value of =erc-nick= as the user.

#+begin_src emacs-lisp
(defconst x8dcc/erc-sasl-servers
  '("irc.libera.chat")
  "List of servers that should be connected through SASL when using
`x8dcc/erc-launch'.")

(defun x8dcc/erc-launch (server port user)
  "Launch ERC through TLS or SASL, depending on `x8dcc/erc-sasl-servers'.

When called interactively, uses 6697 as the port and the value of `erc-nick' as
the user."
  (interactive
   (list (read-string (format-prompt "Server" erc-default-server)
                      nil 'erc-server-history-list erc-default-server)
         6697
         erc-nick))
  (if (member 'sasl erc-modules)
      (progn
        (message "Why was the SASL module enabled globally? Disabling.")
        (setq erc-modules (delete 'sasl erc-modules))))
  ;; Enable the SASL module if the specified server is in the
  ;; `x8dcc/erc-sasl-servers' list.
  (cond ((member server x8dcc/erc-sasl-servers)
         (message "Logging in with SASL to `%s'" server)
         (let ((erc-modules (cons 'sasl erc-modules)))
           (erc-tls :server server :port port :user user)))
        (t
         (message "Logging in with TLS to `%s'" server)
         ;; We don't need to specify the password, since
         ;; `x8dcc/erc-get-password' will be used.
         (erc-tls :server server :port port :user user))))

#+end_src

Add an [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][advice]] so =x8dcc/erc-launch= is called instead of =erc=.

#+begin_src emacs-lisp
(advice-add 'erc :override #'x8dcc/erc-launch)
#+end_src

When authenticating with SASL, use a password, not a certificate file. See
=x8dcc/erc-get-password=.

#+begin_src emacs-lisp
(setq erc-sasl-mechanism 'plain)
#+end_src

Don't ask for ERC passwords unless necessary. Uses a custom function for
authenticating to ERC, which tries to look in =auth-sources= or prompts the user
for a password. For more information, see the [[https://www.gnu.org/software/emacs/manual/html_node/erc/auth_002dsource.html][auth-source node]] of the ERC
manual. This function will be used both when connecting through [[https://www.gnu.org/software/emacs/manual/html_node/erc/Connecting.html#index-erc_002dtls][TLS]] and when
connecting through [[https://www.gnu.org/software/emacs/manual/html_node/erc/SASL.html][SASL]].

#+begin_src emacs-lisp
(defun x8dcc/erc-get-password (&rest plist)
  "Custom replacement for `erc-auth-source-search' that prompts for a password
if necessary."
  (let ((auth-source-password (apply #'erc-auth-source-search plist)))
    (or auth-source-password
        (let ((username (plist-get plist :user)))
          (read-passwd (or (and username
                                (format "Password for `%s': " username))
                           "Password: "))))))

;; Use for authenticating in TLS and SASL.
;; NOTE: Could be used for other `erc-auth-source-*' functions
(setq erc-auth-source-server-function #'x8dcc/erc-get-password
      erc-sasl-auth-source-function #'x8dcc/erc-get-password)

;; The password prompt will be managed by `x8dcc/erc-get-password', if
;; necessary; not by `erc-tls'.
(setq erc-prompt-for-password nil)
#+end_src

*** ERC privacy settings

Don't attempt to connect with another nickname if nickname unavailable.

#+begin_src emacs-lisp
(setq erc-try-new-nick-p nil)
#+end_src

Other privacy settings:
- Don't give away the machine name.
- Don't reply to CTCP.
- Notify CTCP requests.

#+begin_src emacs-lisp
(setq erc-anonymous-login t
      erc-disable-ctcp-replies t
      erc-paranoid t)
#+end_src

*** ERC identification settings

Identification settings. Need to add an =x= because names can't start with a
digit.

#+begin_src emacs-lisp
(setq erc-nick           "x8dcc"
      erc-system-name    "x8dcc"
      erc-user-full-name "x8dcc")
#+end_src

*** ERC log file settings

Enable logging.

#+begin_src emacs-lisp
(setq erc-enable-logging t)

;; Directory for logs
(setq erc-log-channels-directory
      (concat user-emacs-directory "erc-log"))

;; When to write logs
(setq erc-log-write-after-send t
      erc-log-write-after-insert t)
#+end_src

Enable timestamps, but only for logs.

#+begin_src emacs-lisp
(setq erc-stamp-mode t
      erc-hide-timestamps t)
#+end_src

*** ERC visual settings

Hide joins/leaves/quits.

#+begin_src emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+end_src

Fill messages to specific column.

TODO: Sometimes, depending on the line width, a blank line is printed. Not sure
what specific setting is responsible for this.

#+begin_src emacs-lisp
(setq erc-fill-column 80)

;; Align usernames to col 12
(setq erc-fill-function 'erc-fill-static
      erc-fill-static-center 12)
#+end_src

Prompt at the bottom of the screen.

#+begin_src emacs-lisp
(setq erc-scrolltobottom-mode t
      erc-input-line-position -1)
#+end_src

Show the message count in the mode line.

#+begin_src emacs-lisp
(setq erc-track-showcount t
      erc-track-exclude-list '("NICK" "JOIN" "PART" "QUIT" "333" "353"))
#+end_src

*** ERC misc settings

Warn about blank lines.

#+begin_src emacs-lisp
(setq erc-warn-about-blank-lines t)
#+end_src

ERC buffer settings:
- Don't bury ERC buffers by default.
- Kill buffers for channels after /part.
- Kill buffers for private queries after quitting the server.
- Kill buffers for server messages after quitting the server.

#+begin_src emacs-lisp
(setq erc-join-buffer 'buffer
      erc-kill-buffer-on-part t
      erc-kill-queries-on-quit t
      erc-kill-server-buffer-on-quit t)
#+end_src

Wait a bit more before reconnecting, and increase the number of tries.

#+begin_src emacs-lisp
(setq erc-server-reconnect-attempts 5
      erc-server-reconnect-timeout 3)
#+end_src

Set prompt of ERC to the buffer name (current channel).

#+begin_src emacs-lisp
(setq erc-prompt
      (lambda ()
        (concat "[" (buffer-name) "]:")))
#+end_src

** Mail
*** Mail general settings

General mail folder, used in many variables below.

#+begin_src emacs-lisp
(defvar x8dcc/mail-directory
  (expand-file-name "~/Mail/"))
#+end_src

Default email client for reading and writing email.

#+begin_src emacs-lisp
(setq read-mail-command #'rmail
      mail-user-agent 'message-user-agent)
#+end_src

*** Storing SMTP credentials

The following is needed so Emacs asks for GPG password in the minibuffer. I
needed it to avoid a =gpg= error when running [[*ERC][ERC]].

#+begin_src emacs-lisp
(setq epg-pinentry-mode 'loopback)
#+end_src

For your credentials, you will need to create =~/.authinfo.gpg=. Generate a GPG
key pair with:

#+begin_src bash
gpg --quick-generate-key "My Name <my@email.address>"
#+end_src

Then, add your credentials to =~/.authinfo= in the following format. Keep in mind
that =PASSWORD= is not the password you use to log-in to google, but an *App
password*. Create one [[https://myaccount.google.com/apppasswords][here]].

#+begin_src text
machine smtp.gmail.com login EMAIL password "PASSWORD" port 465
#+end_src

Then encrypt the file using =M-x epa-encrypt-file= or by running:

#+begin_src bash
gpg -c ~/.authinfo
#+end_src

You can then delete the original =~/.authinfo= file.

For more information, see [[https://www.emacswiki.org/emacs/GnusAuthinfo][EmacsWiki]].

*** Authinfo priority

Change the priority of the auth sources. This is important because Emacs will
try to save your credentials (e.g. SSH) to the /encrypted/ =.gpg= version, instead
of the plain text one.

See the [[*Storing SMTP credentials][previous section]] on how to store SMTP credentials and the format
expected by =.authinfo= files.

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
#+end_src

*** Sending mail (Message)

Set SMTP encryption, server and port.

#+begin_src emacs-lisp
(setq smtpmail-stream-type 'ssl
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      send-mail-function         #'smtpmail-send-it
      message-send-mail-function #'smtpmail-send-it)
#+end_src

When sending mail, try to sign it with the sender's PGP key.

#+begin_src emacs-lisp
(setq mml-secure-openpgp-sign-with-sender t)
#+end_src

Copy sent mail to the "sent" file.

#+begin_src emacs-lisp
(setq message-default-headers (concat "FCC: " x8dcc/mail-directory "sent"))
#+end_src

*** Receiving mail (Rmail)

Basic Rmail settings (See Section 30 /Reading Mail with Rmail/, of the Emacs
Manual).

#+begin_src emacs-lisp
(setq rmail-file-name (concat x8dcc/mail-directory "inbox")
      rmail-secondary-file-directory x8dcc/mail-directory)
#+end_src

Specify the inbox files.

TODO: It would be good to use "pops://..." URIS directly here, but I am not sure
if emacs can use Mailutil's =movemail=, so for now I have to run it manually with
my [[https://github.com/8dcc/linux-dotfiles/blob/main/scripts/util/mail-fetch][mail-fetch]] script.

#+begin_src emacs-lisp
(setq rmail-primary-inbox-list
      (list (concat "/var/mail/" user-login-name)))
#+end_src

Specify the default file for =rmail-output= and =rmail-output-body-file=.

#+begin_src emacs-lisp
(setq rmail-default-file (concat x8dcc/mail-directory "saved")
      rmail-default-body-file (concat x8dcc/mail-directory "saved-body"))
#+end_src

Choose whether or not Rmail should delete mail from the inbox (set in
=rmail-primary-inbox-list=).

NOTE: Since we are currently reading from a file, and not directly
from the server, we can delete the mail from there. If we were reading
from a server, we might want to preserve them.

#+begin_src emacs-lisp
(setq rmail-preserve-inbox nil)
#+end_src

Prefer plaintext when possible.

#+begin_src emacs-lisp
(setq rmail-mime-prefer-html nil)
#+end_src

** Org mode
*** Org basic settings

Enable "<s TAB" completion.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo))
#+end_src

Disable =electric-pair-mode= pairing of '<', so we can use "<s TAB"
completion.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-local
             electric-pair-inhibit-predicate
             (lambda (c)
               (if (char-equal c ?<)
                   t
                 (electric-pair-default-inhibit c))))))
#+end_src

Org agenda location.

#+begin_src emacs-lisp
(let ((expanded-org-directory (expand-file-name "~/Sync/Org/")))
  (if (file-directory-p expanded-org-directory)
      (setq org-directory expanded-org-directory
            org-agenda-files (list (concat org-directory "agenda.org")))))
#+end_src

Set the first day of the week. See [[*Misc visual settings][Misc visual settings]].

#+begin_src emacs-lisp
(setq org-agenda-start-on-weekday calendar-week-start-day
      org-agenda-weekend-days calendar-weekend-days)
#+end_src

Specify the sound for timers.

#+begin_src emacs-lisp
(setq org-clock-sound (concat user-emacs-directory "my-media/notification.wav"))
#+end_src

Enable code block evaluation for the specified languages. Capitalization
matters.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((C . t)
                             (scheme . t)))
#+end_src

Disable footers in HTML exports.

#+begin_src emacs-lisp
(setq org-html-postamble nil
      org-export-time-stamp-file nil)
#+end_src

Use smart quotes when exporting to HTML or LaTeX.

#+begin_src emacs-lisp
(setq org-export-with-smart-quotes t)
#+end_src

Prefer user labels when exporting to HTML or LaTeX.

#+begin_src emacs-lisp
(setq org-html-prefer-user-labels t
      org-latex-prefer-user-labels t)
#+end_src

Use different pages for the title and TOC in LaTeX.

#+begin_src emacs-lisp
(setq org-latex-title-command "\\maketitle\n\\clearpage"
      org-latex-toc-command "\\tableofcontents\n\\clearpage\n")
#+end_src

Hide link borders in PDF exports.

#+begin_src emacs-lisp
(setq org-latex-hyperref-template
      "\\hypersetup{
          pdfauthor={%a},
          pdftitle={%t},
          pdfkeywords={%k},
          pdfsubject={%d},
          pdflang={%L},
          hidelinks
       }\n")
#+end_src

NOTE: You will probably need the following packages for exporting PDF files:

#+begin_src bash
# Arch:
sudo pacman -S extra/texlive-latex extra/texlive-latexextra extra/texlive-plaingeneric

# Gentoo (untested):
sudo emerge app-text/texlive dev-texlive/texlive-latex dev-texlive/texlive-latexextra texlive-plaingeneric
#+end_src

*** Org visual settings

Org visual settings.

The two fontify variables are used to control the styles of code, quote and
verse blocks. The =org-hide-emphasis-markers= variable is used to hide the =*text*=
markers, and just display bold. The last two variables are set to make sure the
indentation acts natively inside source blocks.

#+begin_src emacs-lisp
(setq org-fontify-quote-and-verse-blocks t
      org-src-fontify-natively t
      org-hide-emphasis-markers t
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively t)
#+end_src

Set the default folding levels for org buffers.

#+begin_src emacs-lisp
(setq org-startup-folded "nofold")
#+end_src

Set =org-link-descriptive= to hide org links. This is changed by the
=org-toggle-link-display= function.

#+begin_src emacs-lisp
(setq org-link-descriptive t)
#+end_src

Enable =org-indent-mode=, which indents sections and hides leading '*' from titles
(=org-hide-leading-stars=).

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (org-indent-mode 1)))
#+end_src

Change =org-done= faces.

#+begin_src emacs-lisp
(set-face-attribute 'org-done          nil :inherit 'shadow :bold t)
(set-face-attribute 'org-headline-done nil :inherit 'shadow)
#+end_src

Show LaTeX entities and expressions in a different face.

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex entities))
#+end_src

*** Org custom functions

It's common for me to use =org-insert-link= after typing a sentence ended in a
space, but when exiting evil's insert mode, the cursor moves on top of that last
space, inserting the link right after the last word. To fix this, this function
checks if there is a space/BOL before the point, and if there isn't, it inserts
a space before inserting the link. We need to use =funcall-interactively= so the
=org-insert-link= function prompts us for a link description. Bound to =SPC m l l=.

See [[*Org mode keybinds][Org mode keybinds]].

#+begin_src emacs-lisp
(defun x8dcc/org-insert-link ()
  "Insert a space in the current position if there isn't one, and call
`org-insert-link'."
  (interactive)
  (if (not (looking-back "^\\|[ \t]" nil))
      (insert " "))
  (funcall-interactively #'org-insert-link))
#+end_src

Create an [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html][overlay]] for setting as invisible the commas that are used to escape
asterisks in org buffers.

#+begin_comment emacs-lisp
;; NOTE: Commented to avoid a performance impact
(x8dcc/make-invisible "^\\s*\\(,\\)\\*" 1)
#+end_comment

*** Org custom heading IDs

Automatically add the =CUSTOM_ID= property to all org headers. Huge credits to
[[https://writequit.org/articles/emacs-org-mode-generate-ids.html][Lee Hinman]] and [[https://protesilaos.com/][Protesilaos Stavrou]].

Since I want my custom ids to look similar to the headlines themselves, I
created this =headline-to-id= function. First, it converts the headline to
lowercase, then it removes the quotes, it replaces non-alphanumerical characters
with a single dash, and then removes any extra dashes from the start and enf of
the ID.

#+begin_src emacs-lisp
(defun x8dcc/org-headline-to-id (headline)
  "Converts an org-mode HEADLINE to a CUSTOM-ID dashed string. For example:
\"My test... =heading=\" would turn into \"my-test-heading\"."
  (replace-regexp-in-string
   "\\(^-+\\|-+$\\)" ""
   (replace-regexp-in-string
    "[^[:alnum:]]+" "-"
    (replace-regexp-in-string
     "\\(\"+\\|'+\\)" ""
     (downcase headline)))))
#+end_src

Next, our =org-custom-id-get= function. It uses =x8dcc/org-headline-to-id= instead
of =org-id-new=. I also removed the call to =org-id-add-location=, since I don't use
=org-id-locations=.

#+begin_src emacs-lisp
(defun x8dcc/org-custom-id-get (&optional pom create)
  "Get the CUSTOM_ID property of the entry at point-or-marker POM.  If POM is
nil, refer to the entry at point. If the entry does not have a CUSTOM_ID, the
function returns nil. However, when CREATE is non nil, create a CUSTOM_ID if
none is present already.

In any case, the CUSTOM_ID of the entry is returned."
  (interactive)
  (org-with-point-at pom
    (let ((id (org-entry-get nil "CUSTOM_ID"))
          (headline (nth 4 (org-heading-components))))
      (cond
       ((and id (stringp id) (string-match "\\S-" id))
        id)
       (create
        (setq id (x8dcc/org-headline-to-id headline))
        (org-entry-put pom "CUSTOM_ID" id)
        id)))))
#+end_src

And add an interactive helper function for adding custom ids to all headlines in
the buffer if they don't already have one.

#+begin_src emacs-lisp
(defun x8dcc/org-custom-id-add-all ()
  "Add CUSTOM_ID properties to all headlines in the current file which do not
already have one. See `x8dcc/org-custom-id-get'."
  (interactive)
  (org-map-entries (lambda () (x8dcc/org-custom-id-get (point) 'create))))
#+end_src

*** Org skeletons

Simple skeleton for Org files.

#+begin_src emacs-lisp
(define-skeleton x8dcc/skeleton-org-default
  "Insert a basic Org header skeleton."
  nil
  '(setq str (skeleton-read "Title: "))
  '(setq v1 (if (or (null str)
                    (string-empty-p str))
                (capitalize (file-name-base buffer-file-name))
              str))
  "#+TITLE: " v1 "\n"
  "#+AUTHOR: " user-full-name "\n"
  "#+OPTIONS: toc:2\n"
  "#+STARTUP: nofold\n\n"
  _ \n)
#+end_src

Skeleton for [[https://8dcc.github.io/][my blog]] articles.

#+begin_src emacs-lisp
(define-skeleton x8dcc/skeleton-org-blog
  "Insert an Org skeleton for blog articles."
  nil
  '(setq str (skeleton-read "Title: "))
  '(setq v1 (if (or (null str)
                    (string-empty-p str))
                (capitalize (file-name-base buffer-file-name))
              str))
  "#+TITLE: " v1 "\n"
  "#+AUTHOR: " user-full-name "\n"
  "#+OPTIONS: toc:nil\n"
  "#+STARTUP: nofold\n"
  "#+HTML_HEAD: <link rel=\"icon\" type=\"image/x-icon\" href=\"../img/favicon.png\">\n"
  "#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n\n"
  "[[file:../index.org][Index]] | [[file:index.org][Up]]\n\n"
  "-----\n\n"
  "#+TOC: headlines 2\n\n"
  "* Introduction\n\n"
  _ \n)
#+end_src

** LaTeX mode
*** LaTeX basic settings

For more information about AUCTeX, see the [[https://www.gnu.org/software/auctex/manual/auctex.pdf][manual]].

Enable self-parsing.

#+begin_src emacs-lisp
(setq TeX-parse-self t)
#+end_src

Enable =TeX-fold-mode= by default. This doesn't fold anything, it just enables the
feature.

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda ()
                             (TeX-fold-mode 1)))
#+end_src

Unfold around active region.

#+begin_src emacs-lisp
(setq TeX-fold-unfold-around-mark t)
#+end_src

Run the =LaTeX= or =TeX= command on the master file. Similar to =TeX-command-master=,
but doesn't prompt for a command.

Note that the string has to be in =TeX-command-list= or the command will fail.

#+begin_src emacs-lisp
(defun x8dcc/latex-compile ()
  "Compile the current master file using the \"LaTeX\" command."
  (interactive)
  (TeX-command "LaTeX" #'TeX-master-file))

(defun x8dcc/tex-compile ()
  "Compile the current master file using the \"TeX\" command."
  (interactive)
  (TeX-command "TeX" #'TeX-master-file))
#+end_src

*** LaTeX font functions

These functions are used for formatting text with =SPC m f=. You will probably
need the [[*AucTex][AucTex]] package, although you can just change the strings being passed
to =x8dcc/tex-get-font-key=.

#+begin_src emacs-lisp
(defun x8dcc/tex-get-font-key (command-string &optional font-list)
  "Find the font key in FONT-LIST for the font whose LaTeX command contains
COMMAND-STRING. Returns a valid font key that can be passed to `TeX-font', or
nil if COMMAND-STRING is not found. If FONT-LIST is nil, `TeX-font-list' is
used."
  ;; TODO: Check if `TeX-font-list' is bound.
  (unless font-list (setq font-list TeX-font-list))
  (let ((item (car font-list)))
    (cond ((string-match-p (regexp-quote command-string) (cadr item))
           (car item))
          ((cdr font-list)
           (x8dcc/tex-get-font-key command-string (cdr font-list)))
          (t nil))))

(defmacro x8dcc/tex-defun-font (func-name command-string &optional font-list)
  "Define a function named FUNC-NAME that searches for a COMMAND-STRING in
FONT-LIST using `x8dcc/tex-get-font-key'."
  `(defun ,func-name ()
     (interactive)
     (let ((key (x8dcc/tex-get-font-key ,command-string ,font-list)))
       (if key (TeX-font nil key)))))

(x8dcc/tex-defun-font x8dcc/latex-font-bold       "bf{")
(x8dcc/tex-defun-font x8dcc/latex-font-emphasized "emph{")
(x8dcc/tex-defun-font x8dcc/latex-font-italics    "it{")
(x8dcc/tex-defun-font x8dcc/latex-font-roman      "rm{")
(x8dcc/tex-defun-font x8dcc/latex-font-smallcaps  "sc{")
(x8dcc/tex-defun-font x8dcc/latex-font-slanted    "sl{")
(x8dcc/tex-defun-font x8dcc/latex-font-typewriter "tt{")
#+end_src

*** LaTeX indentation functions

This function, written by [[https://emacs.stackexchange.com/users/253/dan][Dan]] in [[https://emacs.stackexchange.com/a/3100/40363][this StackExchange answer]], indents =\item=
lines in =itemize=, =enumerate= and =description= environments in LaTeX. This is
specially useful when using my =x8dcc/indent-buffer= function.

#+begin_src emacs-lisp
(defun LaTeX-indent-item ()
  "Provide proper indentation for LaTeX \"itemize\",\"enumerate\", and
\"description\" environments.

  \"\\item\" is indented `LaTeX-indent-level' spaces relative to
  the the beginning of the environment.

  Continuation lines are indented either twice
  `LaTeX-indent-level', or `LaTeX-indent-level-item-continuation'
  if the latter is bound."
  (save-match-data
    (let* ((offset LaTeX-indent-level)
           (contin (or (and (boundp 'LaTeX-indent-level-item-continuation)
                            LaTeX-indent-level-item-continuation)
                       (* 2 LaTeX-indent-level)))
           (re-beg "\\\\begin{")
           (re-end "\\\\end{")
           (re-env "\\(itemize\\|\\enumerate\\|description\\)")
           (indent (save-excursion
                     (when (looking-at (concat re-beg re-env "}"))
                       (end-of-line))
                     (LaTeX-find-matching-begin)
                     (current-column))))
      (cond ((looking-at (concat re-beg re-env "}"))
             (or (save-excursion
                   (beginning-of-line)
                   (ignore-errors
                     (LaTeX-find-matching-begin)
                     (+ (current-column)
                        (if (looking-at (concat re-beg re-env "}"))
                            contin
                          offset))))
                 indent))
            ((looking-at (concat re-end re-env "}"))
             indent)
            ((looking-at "\\\\item")
             (+ offset indent))
            (t
             (+ contin indent))))))

(defcustom LaTeX-indent-level-item-continuation 4
  "*Indentation of continuation lines for items in itemize-like
environments."
  :group 'LaTeX-indentation
  :type 'integer)

(with-eval-after-load 'latex
  (setq LaTeX-indent-environment-list
        (nconc '(("itemize" LaTeX-indent-item)
                 ("enumerate" LaTeX-indent-item)
                 ("description" LaTeX-indent-item))
               LaTeX-indent-environment-list)))
#+end_src

*** LaTeX skeletons

Generic skeleton for LaTeX articles.

#+begin_src emacs-lisp
(define-skeleton x8dcc/skeleton-latex-article
  "Insert a generic LaTeX article skeleton."
  "Document title: "
  "\\documentclass{article}\n\n"
  "\\title{" str "}\n"
  "\\author{" user-full-name "}\n"
  "\\date{" (format-time-string "%Y") "}\n"
  "\n% ------------------------------------------------------------------------------\n"
  "% Packages\n"
  "% ------------------------------------------------------------------------------\n\n"
  "% Link sections and subsections\n"
  "\\usepackage{hyperref}\n"
  "\\hypersetup{linktoc=all, hidelinks}\n\n"
  "% Code highlighting.\n"
  "\\usepackage{listings}\n"
  "\\lstset{\n"
  "  % Showing spaces\n"
  "  showspaces=false,\n"
  "  showstringspaces=false,\n"
  "  showtabs=false,\n"
  "  % Indentation and breaks\n"
  "  tabsize=4,\n"
  "  breaklines=true,\n"
  "  breakatwhitespace=true,\n"
  "  columns=flexible,\n"
  "  % Show left, right, top and bottom borders\n"
  "  frame=tblr,\n"
  "  % Misc\n"
  "  aboveskip=3mm,\n"
  "  belowskip=3mm,\n"
  "  basicstyle={\\small\\ttfamily},\n"
  "}\n\n"
  "% Different monospace font for code blocks (listings)\n"
  "\\usepackage{inconsolata}\n"
  "\n% ------------------------------------------------------------------------------\n"
  "% Document start\n"
  "% ------------------------------------------------------------------------------\n\n"
  "\\begin{document}\n\n"
  "\\maketitle\n"
  "\\clearpage\n"
  "\\tableofcontents\n"
  "\\clearpage\n"
  "\n% ------------------------------------------------------------------------------\n"
  "\\section{" _ "}\n"
  "\\label{sec:TODO}\n"
  "% ------------------------------------------------------------------------------\n\n\n\n"
  "\\end{document}" \n)
#+end_src

Skeleton for =amsart= LaTeX documents.

#+begin_src emacs-lisp
(define-skeleton x8dcc/skeleton-latex-math
  "Insert a math LaTeX document skeleton (amsart)."
  "Document title: "
  "\\documentclass{amsart}\n\n"
  "\\title{" str "}\n"
  "\\author{" user-full-name "}\n"
  "\\date{}\n"
  "\n% ------------------------------------------------------------------------------\n"
  "% Packages\n"
  "% ------------------------------------------------------------------------------\n\n"
  "% Link sections and subsections\n"
  "\\usepackage{hyperref}\n"
  "\\hypersetup{linktoc=all, hidelinks}\n\n"
  "% Various math utilities\n"
  "\\usepackage{amsmath}\n\n"
  "% Graphs\n"
  "\\usepackage{tikz}\n"
  "\\usetikzlibrary{calc} % Coordinate calculations\n"
  "\\tikzset{>=stealth}   % Change default arrow style\n\n"
  "% Code highlighting.\n"
  "\\usepackage{listings}\n"
  "\\lstset{\n"
  "  % Showing spaces\n"
  "  showspaces=false,\n"
  "  showstringspaces=false,\n"
  "  showtabs=false,\n"
  "  % Indentation and breaks\n"
  "  tabsize=4,\n"
  "  breaklines=true,\n"
  "  breakatwhitespace=true,\n"
  "  columns=flexible,\n"
  "  % Show left, right, top and bottom borders\n"
  "  frame=tblr,\n"
  "  % Misc\n"
  "  aboveskip=3mm,\n"
  "  belowskip=3mm,\n"
  "  basicstyle={\\small\\ttfamily},\n"
  "}\n\n"
  "% Different monospace font for code blocks (listings)\n"
  "\\usepackage{inconsolata}\n"
  "\n% ------------------------------------------------------------------------------\n"
  "% Other settings\n"
  "% ------------------------------------------------------------------------------\n\n"
  "% Remove author and extra info from the headers\n"
  "\\pagestyle{plain}\n\n"
  "% New environment adding spacing for tikz pictures\n"
  "\\newenvironment{tikzpicturecenter}\n"
  "{\\begin{center}\\begin{tikzpicture}}\n"
  "    {\\end{tikzpicture}\\end{center}}\n"
  "\n% ------------------------------------------------------------------------------\n"
  "% Document start\n"
  "% ------------------------------------------------------------------------------\n\n"
  "\\begin{document}\n\n"
  "\\maketitle\n"
  "\\tableofcontents\n"
  "\\clearpage\n"
  "\n% ------------------------------------------------------------------------------\n"
  "\\section{" _ "}\n"
  "\\label{sec:TODO}\n"
  "% ------------------------------------------------------------------------------\n\n\n\n"
  "\\end{document}" \n)
#+end_src

** C mode
*** C basic settings

Enable explicit tabs for C code (if not on beginning of line).

#+begin_src emacs-lisp
(setq c-tab-always-indent nil)
#+end_src

When using the =SPC z i= keybind, also call =hide-ifdefs=.

#+begin_src emacs-lisp
(setq hide-ifdef-initially t
      hide-ifdef-lines t)
#+end_src

Enable =cwarn-mode=. I tried using =global-cwarn-mode= but it seemed to enable in
other buffers as well (probably a bug). See also the =cwarn-configuration=
variable.

#+begin_src emacs-lisp
(add-hook 'c-mode-hook
          (lambda ()
            (cwarn-mode 1)))

;; Can't diminish before <cwarn.el> is loaded.
(with-eval-after-load 'cwarn
  (diminish 'cwarn-mode))
#+end_src

For using =ff-find-other-file=, search also in the specified include folders.

#+begin_src emacs-lisp
(with-eval-after-load 'find-file
  (setq-default ff-quiet-mode t)
  (dolist (path '("./include" ".."))
    (add-to-list 'cc-search-directories path)))
#+end_src

*** C custom style

Specify my personal C style. See the =c-default-style= and =c-offsets-alist=
variables.

#+begin_src emacs-lisp
(c-add-style "x8dcc/c-style"
             `("k&r"
               (c-basic-offset . ,tab-width)
               (c-comment-only-line-offset . 0)
               (c-doc-comment-style . doxygen)
               (c-hanging-braces-alist
                (defun-open after)
                (substatement-open after))
               (c-offsets-alist
                (c . c-lineup-C-comments)
                (string . -1000)
                (defun-open . 0)
                (defun-close . 0)
                (defun-block-intro . +)
                (class-open . 0)
                (class-close . 0)
                (inline-open . 0)
                (inline-close . 0)
                (func-decl-cont . +)
                (knr-argdecl-intro . +)
                (knr-argdecl . 0)
                (topmost-intro . 0)
                (topmost-intro-cont . c-lineup-topmost-intro-cont)
                (annotation-top-cont . 0)
                (annotation-var-cont . +)
                (member-init-intro . +)
                (member-init-cont . c-lineup-multi-inher)
                (inher-intro . +)
                (inher-cont . c-lineup-multi-inher)
                (block-open . 0)
                (block-close . 0)
                (brace-list-open . 0)
                (brace-list-close . 0)
                (brace-list-intro . +)
                (brace-list-entry . 0)
                (brace-entry-open . 0)
                (statement . 0)
                (statement-cont . +)
                (statement-block-intro . +)
                (statement-case-intro . +)
                (statement-case-open . 0)
                (substatement . +)
                (substatement-open . 0)
                (substatement-label . -1000)
                (case-label . +)
                (access-label . -)
                (label . -1000)
                (do-while-closure . 0)
                (else-clause . 0)
                (catch-clause . 0)
                (comment-intro . c-lineup-comment)
                (arglist-intro . +)
                (arglist-cont c-lineup-gcc-asm-reg 0)
                (arglist-cont-nonempty . c-lineup-arglist)
                (arglist-close . c-lineup-close-paren)
                (stream-op . c-lineup-streamop)
                (inclass . +)
                (cpp-macro . -1000)
                (cpp-macro-cont . +)
                (cpp-define-intro c-lineup-cpp-define +) ; NOTE: Currently not documented
                (friend . 0)
                (extern-lang-open . 0)
                (extern-lang-close . 0)
                (inextern-lang . +)
                (namespace-open . 0)
                (namespace-close . 0)
                (innamespace . +)
                (module-open . 0)
                (module-close . 0)
                (inmodule . +)
                (composition-open . 0)
                (composition-close . 0)
                (incomposition . +)
                (template-args-cont c-lineup-template-args +)
                (inlambda . 0)
                (lambda-intro-cont . +)
                (inexpr-statement . +)
                (inexpr-class . +))))

(setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (other . "x8dcc/c-style")))
#+end_src

*** C highlight extra constants

Highlight more constants in =c-mode=.

#+begin_src emacs-lisp
(defconst x8dcc/c-constant-list
  '(;; <limits.h>
    "CHAR_BIT" "MB_LEN_MAX" "MB_CUR_MAX"
    "UCHAR_MAX" "UINT_MAX" "ULONG_MAX" "USHRT_MAX"
    "CHAR_MIN" "INT_MIN" "LONG_MIN" "SHRT_MIN"
    "CHAR_MAX" "INT_MAX" "LONG_MAX" "SHRT_MAX"
    "SCHAR_MIN" "SINT_MIN" "SLONG_MIN" "SSHRT_MIN"
    "SCHAR_MAX" "SINT_MAX" "SLONG_MAX" "SSHRT_MAX"
    "LLONG_MIN" "LLONG_MAX" "ULLONG_MAX"
    "INT8_MIN" "INT16_MIN" "INT32_MIN" "INT64_MIN"
    "INT8_MAX" "INT16_MAX" "INT32_MAX" "INT64_MAX"
    "UINT8_MAX" "UINT16_MAX" "UINT32_MAX" "UINT64_MAX"
    "INT_LEAST8_MIN" "INT_LEAST16_MIN" "INT_LEAST32_MIN" "INT_LEAST64_MIN"
    "INT_LEAST8_MAX" "INT_LEAST16_MAX" "INT_LEAST32_MAX" "INT_LEAST64_MAX"
    "UINT_LEAST8_MAX" "UINT_LEAST16_MAX" "UINT_LEAST32_MAX" "UINT_LEAST64_MAX"
    "INT_FAST8_MIN" "INT_FAST16_MIN" "INT_FAST32_MIN" "INT_FAST64_MIN"
    "INT_FAST8_MAX" "INT_FAST16_MAX" "INT_FAST32_MAX" "INT_FAST64_MAX"
    "UINT_FAST8_MAX" "UINT_FAST16_MAX" "UINT_FAST32_MAX" "UINT_FAST64_MAX"
    "INTPTR_MIN" "INTPTR_MAX" "UINTPTR_MAX"
    "INTMAX_MIN" "INTMAX_MAX" "UINTMAX_MAX"
    "PTRDIFF_MIN" "PTRDIFF_MAX" "SIG_ATOMIC_MIN" "SIG_ATOMIC_MAX"
    "SIZE_MAX" "WCHAR_MIN" "WCHAR_MAX" "WINT_MIN" "WINT_MAX"
    ;; <float.h>
    "FLT_RADIX" "FLT_ROUNDS"
    "FLT_DIG" "FLT_MANT_DIG" "FLT_EPSILON"
    "DBL_DIG" "DBL_MANT_DIG" "DBL_EPSILON"
    "LDBL_DIG" "LDBL_MANT_DIG" "LDBL_EPSILON"
    "FLT_MIN" "FLT_MAX" "FLT_MIN_EXP" "FLT_MAX_EXP"
    "DBL_MIN" "DBL_MAX" "DBL_MIN_EXP" "DBL_MAX_EXP"
    "LDBL_MIN" "LDBL_MAX" "LDBL_MIN_EXP" "LDBL_MAX_EXP"
    "FLT_MIN_10_EXP" "FLT_MAX_10_EXP"
    "DBL_MIN_10_EXP" "DBL_MAX_10_EXP"
    ;; <stdio.h>
    "_IOFBF" "_IOLBF" "_IONBF" "BUFSIZ" "FOPEN_MAX" "FILENAME_MAX" "L_tmpnam"
    "SEEK_CUR" "SEEK_END" "SEEK_SET" "TMP_MAX"
    "stdin" "stdout" "stderr" "EOF" "WEOF"
    ;; <stdlib.h>
    "EXIT_FAILURE" "EXIT_SUCCESS" "RAND_MAX"
    ;; <math.h>
    "HUGE_VAL" "HUGE_VALF" "HUGE_VALL"
    ;; <time.h>
    "CLOCKS_PER_SEC"
    ;; <locale.h>
    "LC_ALL" "LC_COLLATE" "LC_CTYPE" "LC_MONETARY" "LC_NUMERIC" "LC_TIME"
    ;; <assert.h>
    "NDEBUG"
    ;; POSIX signals
    "SIG_ERR" "SIG_IGN" "SIGABRT" "SIGFPE" "SIGILL" "SIGHUP" "SIGINT" "SIGSEGV"
    "SIGTERM" "SIGABRT" "SIGALRM" "SIGCHLD" "SIGCONT" "SIGFPE" "SIGHUP" "SIGILL"
    "SIGINT" "SIGKILL" "SIGPIPE" "SIGQUIT" "SIGSEGV" "SIGSTOP" "SIGTERM"
    "SIGTRAP" "SIGTSTP" "SIGTTIN" "SIGTTOU" "SIGUSR1" "SIGUSR2"
    ;; Misc
    "__func__" "__LINE__" "__FILE__" "__DATE__" "__TIME__" "__STDC__"
    "__STDC_VERSION__" "__STDC_HOSTED__" "__VA_ARGS__")
  "List of (non-regexp) strings for building `x8dcc/c-constant-regexp' with
`regexp-opt'.

Got most of these constant names from \"$VIMRUNTIME/syntax/c.vim\".

Not included: NULL, true, false")

(defconst x8dcc/c-constant-regexp
  (concat (regexp-opt x8dcc/c-constant-list 'symbols))
  "Regular expression matching all constants in `x8dcc/c-constant-list'.

Used for highlighting more constants with `font-lock-constant-face' in
`c-mode'.")

(font-lock-add-keywords 'c-mode
  (list (cons x8dcc/c-constant-regexp 'font-lock-constant-face)))
#+end_src

*** C skeletons

Define a skeleton for simple C files.

#+begin_src emacs-lisp
(define-skeleton x8dcc/skeleton-c-source
  "Insert a basic C source skeleton with a main function."
  nil
  "\n"
  "#include <stdint.h>\n"
  "#include <stdbool.h>\n"
  "#include <stdio.h>\n"
  "#include <string.h>\n"
  "#include <stdlib.h>\n\n"
  "int main(void) {\n"
  > _ "\n"
  > "return 0;\n"
  "}" \n)
#+end_src

This skeleton is useful for adding [[https://en.wikipedia.org/wiki/Include_guard][include guards]] to C headers. The old function
can be found at commit [[https://github.com/8dcc/emacs-dotfiles/blob/0b03b1f3033afa30482f4081f8d2fee14af305a3/emacs/config.el#L1442-L1454][0b03b1f]].

#+begin_src emacs-lisp
(define-skeleton x8dcc/skeleton-c-header
  "Insert a basic C header skeleton with include guards."
  nil
  '(setq str (skeleton-read "Header name: "))
  '(setq v1 (concat (upcase (if (or (null str)
                                    (string-empty-p str))
                                (file-name-base buffer-file-name)
                              str))
                    "_H_"))
  "\n"
  "#ifndef " v1 "\n"
  "#define " v1 " 1\n\n"
  _ "\n\n"
  "#endif /* " v1 " */" \n)
#+end_src

Insert GPL-3.0 (or later) comment.

#+begin_src emacs-lisp
(define-skeleton x8dcc/skeleton-c-license-comment
  "Insert a basic C header skeleton with include guards."
  nil
  '(setq str
         (let ((project (project-current)))
           (skeleton-read "Project name: "
                          (and project (project-name project)))))
  "/*\n"
  " * Copyright " (format-time-string "%Y") " 8dcc\n"
  " *\n"
  " * This file is part of " str ".\n"
  " *\n"
  " * This program is free software: you can redistribute it and/or modify it under\n"
  " * the terms of the GNU General Public License as published by the Free Software\n"
  " * Foundation, either version 3 of the License, or any later version.\n"
  " *\n"
  " * This program is distributed in the hope that it will be useful, but WITHOUT\n"
  " * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n"
  " * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n"
  " * details.\n"
  " *\n"
  " * You should have received a copy of the GNU General Public License along with\n"
  " * this program. If not, see <https://www.gnu.org/licenses/>.\n"
  " */\n" \n)
#+end_src

*** C misc functions

This wrapper enables [[*Beardbolt][beardbolt-mode]] in a C buffer and calls =beardbolt-compile=.

#+begin_src emacs-lisp
(defun x8dcc/beardbolt-disassemble ()
  "Enable `beardbolt-mode' and call `beardbolt-compile'."
  (interactive)
  (beardbolt-mode 1)
  (call-interactively #'beardbolt-compile))
#+end_src

** GDB

Launch in the /Many Windows/ layout.

#+begin_src emacs-lisp
(setq gdb-many-windows t)
#+end_src

Restore previous windows when GDB stops.

#+begin_src emacs-lisp
(setq gdb-restore-window-configuration-after-quit 'if-gdb-many-windows)
#+end_src

Don't ask for =debuginfod= stuff.

#+begin_src emacs-lisp
(setq gdb-debuginfod-enable-setting nil)
#+end_src

Directory where the window configurations are saved. See the
=gdb-save-window-configuration= and =gdb-load-window-configuration= functions.

#+begin_src emacs-lisp
(setq gdb-window-configuration-directory
      (concat user-emacs-directory "gdb-layouts/"))
#+end_src

** Compilation

Automatically scroll the output of compilation buffers, unless an error is
found.

#+begin_src emacs-lisp
(setq compilation-scroll-output 'first-error)
#+end_src

Automatically kill running compilation processes when running a new one, without
asking the user.

#+begin_src emacs-lisp
(setq compilation-always-kill t)
#+end_src
