#+title: Vanilla emacs configuration
#+options: toc:nil
#+property: header-args:emacs-lisp :tangle config.el
#+author: 8dcc

#+TOC: headlines 2

* Identification

Identification for GPG configuration, email, templates, etc.

#+begin_src emacs-lisp
(setq user-full-name "8dcc"
      user-mail-address "8dcc.git@gmail.com")
#+end_src

* Theme

Remove GUI bars.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

Use a separate Custom file for more readability. This will contain the
SHA-256 hash of the trusted themes, and other user changes. For more
information, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][50.1.4 Saving Customizations]] and
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][50.1.7 Custom Themes]].

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file)
#+end_src

Load my custom theme from =~/.emacs.d/themes/x8dcc-modus-vivendi-theme.el=.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
(load-theme 'x8dcc-modus-vivendi)
#+end_src

Change the emacs splash screen image. This should not matter since
it's overwritten by dashboard.

#+begin_src emacs-lisp
(setq fancy-splash-image (concat user-emacs-directory "img/splash.png"))
#+end_src

* Fonts

Default font. Most of the =.bdf= files are in my [[https://github.com/8dcc/linux-dotfiles][linux-dotfiles]] repo.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "Dina 8")
#+end_src

Fallback font for unicode. You can't specify =nil= there, it needs to be
='unicode=.

#+begin_src emacs-lisp
(set-fontset-font t 'unicode "Cozette 10")
#+end_src

Variable pitch and fixed pitch fonts.

#+begin_src emacs-lisp
(set-face-attribute 'variable-pitch nil
  :font "Fira Sans 10"
  :weight 'regular)

(set-face-attribute 'fixed-pitch nil
  :font "Dina 8")
#+end_src

I guess this is needed for =emacsclient=.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Dina 8"))
#+end_src

Change =org-done= faces. The code for changing the org titles is commented.

#+begin_src DISABLED
(set-face-attribute 'org-level-1 nil
                    :family "Fira Code"
                    :height 1.4
                    :inherit 'outline-1)
#+end_src

#+begin_src emacs-lisp
(set-face-attribute 'org-done          nil :inherit 'shadow :bold t)
(set-face-attribute 'org-headline-done nil :inherit 'shadow)
#+end_src

* Packages
** Package managers

Bootstrap [[about:blank][straight.el]], which will be used as a "back-end" for =use-package=. For
more information, see: [[https://web.archive.org/web/20230522053703/https://jeffkreeftmeijer.com/emacs-straight-use-package/][Link]].

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el"
                          user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
      (url-retrieve-synchronously
        "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Install [[https://github.com/jwiegley/use-package][use-package]] (through =straight.el=) for more convenience. Setting
=straight-use-package-by-default= tells use-package to always use straight.el to
install packages (instead of emacs' package.el), even without specifying
=:straight t=.

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
#+end_src

See also [[file:./straight/versions/default.el][versions/default.el]], the resulting [[https://github.com/radian-software/straight.el#configuration-reproducibility][lockfile]] of
=M-x straight-freeze-versions=.

** Diminish

For hiding minor modes from the modeline. We will be using =:diminish=
in a lot of =(use-package)= expressions, to hide those minor modes.

#+begin_src emacs-lisp
(use-package diminish
  :config
  (diminish 'abbrev-mode)
  (diminish 'visual-line-mode))
#+end_src

** Evil & Evil collection

For vi-like keybinds. Configure split direction so new splits are
opened to the bottom and to the right.

We set =evil-want-C-i-jump= to =nil= to avoid some =TAB= problems.

We also set =evil-mode-line-format= for displaying the evil mode before the buffer
name.

We alias =forward-evil-word= to =forward-evil-symbol= and set
=evil-symbol-word-search= so using =b= and =e= ignores =_= and =-= depending on the
language's symbols.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-split-window-below t
        evil-vsplit-window-right t
        evil-undo-system 'undo-redo
        evil-want-C-i-jump nil
        evil-mode-line-format '(after . mode-line-frame-identification))
  (evil-mode)
  :config
  (defalias #'forward-evil-word #'forward-evil-symbol)
  (setq-default evil-symbol-word-search t))
#+end_src

For using vi-like keybinds in other buffer types.

#+begin_src emacs-lisp
(use-package evil-collection
  :diminish evil-collection-unimpaired-mode
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help)
  (evil-collection-init))
#+end_src

** General

Define our own =SPC= keybinds.

The =general-create-definer= macro is used to define our own =x8dcc/*= macro, which
will be used later for defining the keys more easily. We specify the states for
the keybinds (all except of evil's insert), we specify the keymaps (See
[[elisp:(describe-variable 'general-keymap-aliases)][general-keymap-aliases]]), and the prefix. We will use =SPC= as prefix for normal
modes, and =M-SPC= for other modes like /emacs/ or evil's /insert/. See also
=general-non-normal-states=.

For the main keybinds, see [[Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer x8dcc/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer x8dcc/org-keys
    :states '(normal insert visual emacs)
    :keymaps 'org-mode-map
    :prefix "SPC"
    :non-normal-prefix "M-SPC")
  (general-create-definer x8dcc/c-keys
    :states '(normal insert visual emacs)
    :keymaps '(c-mode-map c++-mode-map java-mode-map js-mode-map js-json-mode-map)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"))
#+end_src

** Which key

For the keybind completion menu. Press =C-x= and wait for about 1 second to
display a list of available keybinds.

#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t)
  (which-key-mode 1))
#+end_src

** Projectile

For managing projects.

#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :config
  (projectile-mode 1))
#+end_src

** Magit

You should not need a description for magit.

We change =magit-display-buffer-function= so the status window doesn't open as a
popup. For other available functions, see =C-h f magit-display-buffer- TAB=.

#+begin_src emacs-lisp
(use-package magit
  :hook ((git-commit-setup . evil-insert-state))
  :config
  (setq magit-diff-refine-hunk t
        magit-display-buffer-function
        #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Dashboard

A nice dashboard with recent files, recent projects, and org agenda.

#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-banner-logo-title "8dcc's Emacs"
        dashboard-startup-banner (concat user-emacs-directory "img/splash.png")
        dashboard-center-content t
        dashboard-show-shortcuts nil
        dashboard-set-footer nil
        dashboard-page-separator "\n\n"
        dashboard-items '((recents . 10)
                          (projects . 5)
                          (agenda . 10)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Vertico

Vertical completion for =M-x=, =find-file=, etc.

Use =vertico-reverse-mode= to show completion on top of minibuffer, and
not bellow it.

#+begin_src emacs-lisp
(use-package vertico
  :config
  (vertico-mode 1)
  (vertico-reverse-mode 1))
#+end_src

** Marginalia

For extra information on the minibuffer when using [[Vertico][vertico]].

#+begin_src emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode 1))
#+end_src

** Orderless

Adds a better search completion to =completion-styles= (Used in =M-x=,
=find-file=, etc.)

#+begin_src emacs-lisp
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)))
#+end_src

** Consult

For providing better completion buffers similar to [[Vertico][vertico]] (same author).

We set =completion-in-region-function= to =#'consult-completion-in-region= for
better completion in buffers like eshell. See [[https://github.com/minad/vertico#completion-at-point-and-completion-in-region][vertico readme]].

#+begin_src emacs-lisp
(use-package consult
  :config
  (setq completion-in-region-function
		(lambda (&rest args)
          (apply (if vertico-mode
					 #'consult-completion-in-region
                   #'completion--in-region)
				 args))))
#+end_src

** Popper

For converting less-important buffers into popups. They can be toggled
with =SPC t p=. See [[Space keybinds][Space keybinds]].

#+begin_src emacs-lisp
(use-package popper
  :config
  (setq popper-group-function #'popper-group-by-projectile
        popper-reference-buffers '(compilation-mode
                                   messages-mode
                                   help-mode
                                   occur-mode
								   man-mode
                                   "^\\*Warnings\\*"
                                   "^\\*Compile-Log\\*"
                                   "^\\*Backtrace\\*"
                                   "^\\*evil-registers\\*"
                                   "^\\*Apropos\\*"
                                   "^\\*scratch\\*"
                                   ;"^\\*Messages\\*"
                                   ;"^\\*Completions\\*"
                                   "^Calc:"))
  (let ((popper-mode-line-formatted (propertize " *POP* " 'face 'bold)))
    (setq popper-mode-line popper-mode-line-formatted))
  (popper-mode 1))
#+end_src

** EMMS

Enable the /Emacs Multi-Media System/ (EMMS).

We add =--no-video= parameter for =mpv= so we can listen to YouTube videos.

Since =emms-volume-*= changes the volume of the whole system, I added =--volume=X=
to the =mpv= parameters, since it's always a bit loud by default.

We set =emms-mode-line-mode= to zero so it displays only the time instead of the
filename.

#+begin_src emacs-lisp
(use-package emms
  :config
  (emms-all)
  (setq emms-librefm-scrobbler-username "8dcc"
        emms-librefm-scrobbler-password "PASSWORD"
        emms-player-list '(emms-player-mpv
                           emms-player-vlc)
        emms-player-mpv-parameters '("--quiet"
                                     "--really-quiet"
                                     "--no-audio-display"
                                     "--no-video"
                                     "--volume=50"))
  (emms-mode-line-mode 0))
#+end_src

** Spelling

We will use the =spell-fu= package for basic spelling. I don't use any packages
for code completion or code syntax.

The package won't be enabled in Windows systems, since it depends on the =aspell=
command.

We will use both =en_US= and =es= dictionaries.

We also exclude a list of faces when using to avoid highlighting source code
blocks, tags, etc. This list was taken from the [[https://github.com/doomemacs/doomemacs/blob/a89d4b7df556bb8b309d1c23e0b60404e750f156/modules/checkers/spell/config.el#L85][doom emacs]] repository.

#+begin_src emacs-lisp
(unless (member system-type '(ms-dos windows-nt cygwin))
  (use-package spell-fu
    :hook ((org-mode      . spell-fu-mode)
           (markdown-mode . spell-fu-mode)
           (erc-mode      . spell-fu-mode)
           (mail-mode     . spell-fu-mode)
           (text-mode     . spell-fu-mode))
    :config
    (add-hook 'spell-fu-mode-hook
              (lambda ()
                (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "en_US"))
                (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "es"))))
    (add-hook 'markdown-mode
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(markdown-code-face
                        markdown-html-attr-name-face
                        markdown-html-attr-value-face
                        markdown-html-tag-name-face
                        markdown-inline-code-face
                        markdown-link-face
                        markdown-markup-face
                        markdown-plain-url-face
                        markdown-reference-face
                        markdown-url-face))))
    (add-hook 'org-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(org-block
                        org-block-begin-line
                        org-block-end-line
                        org-cite
                        org-cite-key
                        org-code
                        org-date
                        org-footnote
                        org-formula
                        org-inline-src-block
                        org-latex-and-related
                        org-link
                        org-meta-line
                        org-property-value
                        org-ref-cite-face
                        org-special-keyword
                        org-tag
                        org-todo
                        org-todo-keyword-done
                        org-todo-keyword-habt
                        org-todo-keyword-kill
                        org-todo-keyword-outd
                        org-todo-keyword-todo
                        org-todo-keyword-wait
                        org-verbatim))))))
#+end_src

** Drag stuff

For dragging lines with =M-<down>= and =M-<up>=.

#+begin_src emacs-lisp
(use-package drag-stuff
  :diminish
  :config
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys))
#+end_src

** Highlight TODOs

Highlight common keywords inside =org-mode= and =prog-mode=. Added =DELME=
since I use that often.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        '(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("DELME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

** Rainbow mode

For displaying colors in the background of RGB strings.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook ((html-mode . rainbow-mode)
         (css-mode  . rainbow-mode)
         (js-mode   . rainbow-mode)))
#+end_src

** Rainbow delimiters

Add rainbow colors to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode  . rainbow-delimiters-mode)
         (scheme-mode      . rainbow-delimiters-mode)
         (common-lisp-mode . rainbow-delimiters-mode)))
#+end_src

** Highlight numbers

For highlighting numeric literals.

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook ((prog-mode . highlight-numbers-mode)))
#+end_src

** Clang format

For formatting C files. You can find my =.clang-format= in my [[https://github.com/8dcc/linux-dotfiles/tree/main/dotfiles/clang-format][8dcc/linux-dotfiles]] repo.

#+begin_src emacs-lisp
(use-package clang-format
  :config
  (setq clang-format-style "file"))
#+end_src

** Vi tilde

For displaying vi's =~= on EOF. Displays on the fringe.

#+begin_src emacs-lisp
(use-package vi-tilde-fringe
  :diminish
  :hook ((prog-mode . vi-tilde-fringe-mode)
         (org-mode  . vi-tilde-fringe-mode)
         (text-mode . vi-tilde-fringe-mode))
  :config
  (setq vi-tilde-fringe-bitmap-array [0 0 0 9 21 18 0 0]))
#+end_src

The bitmap array =[0 0 0 9 21 18 0 0]= corresponds to the =~= character
in the font Dina:

#+begin_src
0b001001 ->  #  #
0b010101 -> # # #
0b010010 -> #  #
#+end_src

** Htmlize

Required by =org-html-export-to-html=.

#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

** Org bullets

Display unicode icons instead of =*= for org headings.

NOTE: Most of the cozette font icons don't render correctly in titles because
they are bold.

#+begin_src emacs-lisp
(use-package org-bullets
  :hook ((org-mode . org-bullets-mode))
  :config
  (setq org-bullets-bullet-list '("·")))
#+end_src

** Git gutter fringe

Show git changes in the fringe.

First of all, we create a macro for defining a fringe bitmap from a width and a
height. This macro will calculate the number needed for each row of the bitmap
from the width, make a list of =h= elements, and turn it into a vector. It will
pass that, with the =name= and =alignment= to =define-fringe-bitmap=. For more
information, see [[https://github.com/8dcc/lisp-stuff/blob/main/src/bitmap-rect.org][8dcc/lisp-stuff]].

#+begin_src emacs-lisp
(defmacro x8dcc/fringe-helper-rect (name alignment w h)
  "Convert W and H to a bitmap array, and call `define-fringe-bitmap' with NAME
and ALIGNMENT as parameters."
  `(define-fringe-bitmap ,name
     (apply #'vector
            (make-list ,h
                       (- (ash 1 ,w) 1)))
     nil nil ,alignment))
#+end_src

We then use our new =my-fringe-helper-rect= to specify the width and height of the
bitmap used in the fringe. It will be drawn with my theme's
=bg-[added/changed/removed]= faces, and with the default fringe background.

NOTE: For more information on creating the bitmaps easily with strings, see the
=fringe-helper-define= macro.

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config
  (x8dcc/fringe-helper-rect 'git-gutter-fr:added nil 3 30)
  (x8dcc/fringe-helper-rect 'git-gutter-fr:deleted nil 3 30)
  (x8dcc/fringe-helper-rect 'git-gutter-fr:modified nil 3 30)
  (global-git-gutter-mode 1))
#+end_src

** Whiteroom mode

Great mode for distraction-free editing.

We set =writeroom-mode-line= to =nil=, change to =t= to display the modeline. We also
set =writeroom-restore-window-config=, which makes sense since it's going to
overwrite the window layout.

We use 81 for =writeroom-width= so our whole 80 char =fill-column= fits. We don't
use =(+ fill-column 1)= because we haven't set it yet. See [[Misc visual settings][Misc visual settings]].

We also remove =writeroom-set-fullscreen= from =writeroom-global-effects=, so the
emacs window doesn't get changed. We already disabled all the other menu bar
items in [[Theme][Theme]].

Lastly, we disable fringes in =writeroom-mode-enable-hook=, and re-enable them in
=writeroom-mode-disable-hook=. We could also increase and reset the font size from
these lambdas.

#+begin_src emacs-lisp
(use-package writeroom-mode
  :config
  (setq writeroom-mode-line nil
        writeroom-restore-window-config t
        writeroom-width 81
        writeroom-global-effects '(writeroom-set-alpha
                                   writeroom-set-menu-bar-lines
                                   writeroom-set-tool-bar-lines
                                   writeroom-set-vertical-scroll-bars
                                   writeroom-set-bottom-divider-width))
  (add-hook 'writeroom-mode-enable-hook (lambda ()
                                          (fringe-mode 0)))
  (add-hook 'writeroom-mode-disable-hook (lambda ()
                                           (fringe-mode nil))))
#+end_src

** Nasm mode

Personal fork of [[https://github.com/skeeto/nasm-mode][skeeto/nasm-mode]] with some modified
functionality. Uses a =straight.el= recipe.

#+begin_src emacs-lisp
(straight-use-package
  '(nasm-mode :type git :host github :repo "8dcc/nasm-mode"))
#+end_src

* Misc functions and macros

This function will be used for hooking a list of =functions= into the specified
=target=.

#+begin_src emacs-lisp
(defun x8dcc/hook-funcs (target functions)
  "Hook each function in FUNCTIONS to TARGET using `add-hook'."
  (mapcar (lambda (func)
            (add-hook target func))
          functions))
#+end_src

This function is similar to =x8dcc/hook-funcs=, but it will be used for hooking a
*single function* to *each target* of the list.

#+begin_src emacs-lisp
(defun x8dcc/hook-to-targets (function targets)
  "Hook FUNCTION to each target in TARGETS using `add-hook'."
  (mapcar (lambda (target)
            (add-hook target function))
          targets))
#+end_src

* Input
** Custom input functions

Small wrappers used for the keybinds.

It's common for me to use =org-insert-link= after typing a sentence ended in a
space, but when exiting evil's insert mode, the cursor moves on top of that last
space, inserting the link right after the last word. To fix this, this function
inserts a space right before inserting the link. We need to use
=funcall-interactively= so the =org-insert-link= function prompts us for a link
description.

See [[*Org mode keybinds][Org mode keybinds]].

#+begin_src emacs-lisp
(defun x8dcc/org-insert-link ()
  "Inserts a space in the current position, and calls `org-insert-link'."
  (interactive)
  (insert " ")
  (funcall-interactively #'org-insert-link))
#+end_src

** Scrolling and motion

1. Scroll smoothly when cursor moves out of the screen (1 line at a time).
2. Don't accelerate scrolling.
3. Scroll window under mouse.
4. Scroll 2 lines at a time with mouse wheel, and scroll horizontally with shift.

#+begin_src emacs-lisp
(setq scroll-step 1
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse t
      mouse-wheel-scroll-amount '(3 ((shift) . hscroll)))
#+end_src

** Misc global keybinds

Zoom keybinds.

#+begin_src emacs-lisp
(global-set-key (kbd "C-+")            #'text-scale-increase)
(global-set-key (kbd "C--")            #'text-scale-decrease)
(global-set-key (kbd "C-<wheel-up>")   #'text-scale-increase)
(global-set-key (kbd "C-<wheel-down>") #'text-scale-decrease)
(global-set-key (kbd "C-<home>") (lambda () (interactive)
                                   (text-scale-adjust 0)))
#+end_src

Quit from minibuffer with one ESC, instead of 3 ESCs or C-g.

#+begin_src emacs-lisp
(global-set-key [escape] #'keyboard-escape-quit)
#+end_src

Paste with =C-S-v=. Useful for the minibuffer (e.g. org links).

#+begin_src emacs-lisp
(global-set-key (kbd "C-S-v") #'yank)
#+end_src

Map =S-<tab>= to vim's =<=. Could also use something like =indent-rigidly -4=. For
more settings related to indentation and =<tab>=, see [[*Misc mode settings][Misc mode settings]].

#+begin_src emacs-lisp
(global-set-key (kbd "<backtab>")
                (lambda () (interactive)
                  ;; If there is a region active, use `evil-shift-left',
                  ;; otherwise shift the current line.
                  (if (use-region-p)
                      (evil-shift-left (region-beginning) (region-end))
                    (evil-shift-left-line 1))))
#+end_src

Remap evil's =:q= to =SPC b k.=

#+begin_src emacs-lisp
(global-set-key [remap evil-quit] #'kill-current-buffer)
#+end_src

Remap evil's =:wq= to =SPC b s= + =SPC b k=.

#+begin_src emacs-lisp
(global-set-key [remap evil-save-and-close]
                (lambda () (interactive)
                  (basic-save-buffer)
                  (kill-current-buffer)))
#+end_src

** Misc org keybinds

Use =C-<up>= and =C-<down>= to move subtrees in org-mode. Although we are using the
[[*Drag stuff][drag stuff]] package, this only moves individual lines, and not subtrees. We could
overwrite the =M-<up>= and =M-<down>= keybinds, but moving individual lines is still
useful in large org files.

#+begin_src emacs-lisp
(keymap-set org-mode-map "C-<up>"   #'org-move-subtree-up)
(keymap-set org-mode-map "C-<down>" #'org-move-subtree-down)
#+end_src

Use =C-S-<left>= and =C-S-<right>= to change the current header's level. This is
bound by defect to =M-S-<left>= and =M-S-<right>=. We don't set it to =C-<left>= and
=C-<right>= because these are used to jump between words.

#+begin_src emacs-lisp
(keymap-set org-mode-map "C-S-<left>"  #'org-shiftmetaleft)
(keymap-set org-mode-map "C-S-<right>" #'org-shiftmetaright)
#+end_src

** Misc eshell keybinds

Better function for clearing than =recenter-top-bottom=.

#+begin_src emacs-lisp
(with-eval-after-load 'eshell
  (keymap-set eshell-mode-map "C-l" (lambda () (interactive)
                                      (eshell/clear-scrollback)
                                      (eshell-emit-prompt))))
#+end_src

** Space keybinds

See also [[General][General]] package.

*** Global keybinds

Notes:
- You can use =consult-recent-file= instead of =recentf-open= for previewing the
  file contents, but I don't like that.
- You can use =consult-buffer= instead of =switch-to-buffer= for previewing the
  buffers, but this has a performance impact in slow machines.

#+begin_src emacs-lisp
(x8dcc/leader-keys
  "SPC" '(projectile-find-file :wk "Find file in project") ;; Same as "SPC p f"
  "."   '(find-file            :wk "Find file")            ;; Same as "SPC f f"
  ;; Buffer
  "b"   '(:ignore t           :wk "Buffer")
  "b k" '(kill-current-buffer :wk "Kill current")
  "b l" '(switch-to-buffer    :wk "Switch to")
  "b L" '(buffer-menu         :wk "List")
  "b s" '(basic-save-buffer   :wk "Save")
  "b r" '(revert-buffer       :wk "Revert (discard)")
  "b x" '(scratch-buffer      :wk "Open scratch buffer")
  ;; File
  "f"   '(:ignore t          :wk "File")
  "f f" '(find-file          :wk "Find file")
  "f o" '(ff-find-other-file :wk "Find other file")
  "f r" '(recentf-open       :wk "Open recent")
  ;; Magit
  "g"   '(:ignore t                 :wk "Git")
  "g c" '(magit-commit              :wk "Commit menu")
  "g e" '(magit-ediff-wdim          :wk "Ediff")
  "g f" '(magit-fetch               :wk "Fetch menu")
  "g F" '(magit-pull                :wk "Pull menu")
  "g g" '(magit-status              :wk "Magit status")
  "g p" '(magit-push                :wk "Push menu")
  "g s" '(magit-stage-buffer-file   :wk "Stage current")
  "g u" '(magit-unstage-buffer-file :wk "Unstage current")
  ;; Help
  "h"   '(:ignore t         :wk "Help")
  "h f" '(describe-function :wk "Describe function")
  "h F" '(describe-face     :wk "Describe face")
  "h i" '(info              :wk "Open info")
  "h I" '(shortdoc          :wk "Open shortdoc")
  "h k" '(describe-key      :wk "Describe key")
  "h m" '(describe-mode     :wk "Describe mode")
  "h v" '(describe-variable :wk "Describe variable")
  ;; Open
  "o"   '(:ignore t                       :wk "Open")
  "o -" '(dired-jump                      :wk "Dired")
  "o a" '(org-agenda                      :wk "Org agenda")
  "o d" '(projectile-run-gdb              :wk "Debugger")
  "o e" '(x8dcc/eshell-popup              :wk "Eshell popup")
  "o E" '(x8dcc/eshell-project-or-current :wk "Eshell")
  ;; Project
  "p"   '(:ignore t                      :wk "Project")
  "p c" '(projectile-compile-project     :wk "Compile")
  "p C" '(projectile-repeat-last-command :wk "Re-compile")
  "p f" '(projectile-find-file           :wk "Find file")
  "p p" '(projectile-switch-project      :wk "Recent projects")
  "p r" '(projectile-recentf             :wk "Recent files")
  ;; Search
  "s"   '(:ignore t                    :wk "Search")
  "s e" '(spell-fu-goto-next-error     :wk "Next spelling error")
  "s E" '(spell-fu-goto-previous-error :wk "Previous spelling error")
  "s h" '(highlight-regexp             :wk "Highlight")
  "s H" '(unhighlight-regexp           :wk "Unhighlight")
  "s i" '(consult-imenu                :wk "Jump to symbol")
  "s l" '(consult-line                 :wk "Jump to line")
  "s o" '(occur                        :wk "Occurrences")
  "s r" '(rgrep                        :wk "Recursive grep")
  ;; Toggle
  "t"   '(:ignore t                          :wk "Toggle")
  "t c" '(display-fill-column-indicator-mode :wk "Fill column line")
  "t p" '(popper-toggle                      :wk "Popups")
  "t r" '(read-only-mode                     :wk "Read only")
  "t s" '(spell-fu-mode                      :wk "Spell checking")
  "t S" '(whitespace-mode                    :wk "Whitespace visualization")
  "t v" '(visible-mode                       :wk "Visible")
  "t w" '(toggle-truncate-lines              :wk "Line wrapping")
  "t W" '(auto-fill-mode                     :wk "Auto fill mode")
  "t z" '(writeroom-mode                     :wk "Zen mode")
  ;; Window
  "w"   '(:ignore t                    :wk "Window")
  "w c" '(evil-window-delete           :wk "Close")
  "w s" '(evil-window-split            :wk "Split horizontally")
  "w v" '(evil-window-vsplit           :wk "Split vertically")
  "w h" '(evil-window-left             :wk "Left")
  "w l" '(evil-window-right            :wk "Right")
  "w j" '(evil-window-down             :wk "Down")
  "w k" '(evil-window-up               :wk "Up")
  "w w" '(evil-window-next             :wk "Next")
  "w H" '(evil-window-move-far-left    :wk "Move current left")
  "w L" '(evil-window-move-far-right   :wk "Move current right")
  "w J" '(evil-window-move-very-bottom :wk "Move current down")
  "w K" '(evil-window-move-very-top    :wk "Move current up")
  ;; Fold
  "z"   '(:ignore t        :wk "Fold")
  "z a" '(evil-toggle-fold :wk "Toggle")
  "z c" '(evil-close-fold  :wk "Close")
  "z m" '(evil-close-folds :wk "Close all")
  "z o" '(evil-open-fold   :wk "Open")
  "z r" '(evil-open-folds  :wk "Open all"))
#+end_src

*** Org mode keybinds

Notes:
- Instead of =SPC m t=, you can use =S-<left>= and =S-<right>= to change the todo
  state.

See also:
- [[*Misc org keybinds][Misc org keybinds]].
- For more information on the =x8dcc/*= functions, see [[*General][General]] and [[*Custom input functions][Custom input functions]].

#+begin_src emacs-lisp
(x8dcc/org-keys
  ;; Toggle -> Org inline images
  "t i"   '(org-toggle-inline-images :wk "Inline images")
  ;; Mode (Org)
  "m"     '(:ignore t :wk "Org")
  ;; Org -> Date
  "m d"   '(:ignore t    :wk "Date")
  "m d d" '(org-deadline :wk "Deadline")
  "m d s" '(org-schedule :wk "Schedule")
  ;; Org -> Export
  "m e"   '(:ignore t                 :wk "Export")
  "m e a" '(org-ascii-export-to-ascii :wk "ASCII (text)")
  "m e h" '(org-html-export-to-html   :wk "HTML")
  "m e l" '(org-latex-export-to-latex :wk "LaTeX")
  "m e p" '(org-latex-export-to-pdf   :wk "PDF")
  ;; Org -> Link
  "m l"   '(:ignore t             :wk "Link")
  "m l l" '(x8dcc/org-insert-link :wk "Insert")
  "m l s" '(org-store-link        :wk "Store")
  ;; Org -> Priority
  "m p"   '(:ignore t         :wk "Priority")
  "m p d" '(org-priority-down :wk "Decrease")
  "m p p" '(org-priority      :wk "Insert")
  "m p u" '(org-priority-up   :wk "Increase")
  ;; Org -> Todo
  "m t"   '(org-todo :wk "Toggle todo")
  ;; Org -> Tangle
  "m T"   '(org-babel-tangle :wk "Tangle current file"))
#+end_src

*** C mode keybinds

Keybinds for =c-mode-map=, =c++-mode-map=, =java-mode-map=, =js-mode-map= and
=js-json-mode-map=.

See also:
- [[*C mode][C mode]].
- For more information on the =x8dcc/*= functions, see [[*General][General]] and
  [[Custom functions][Custom functions]].

#+begin_src emacs-lisp
(x8dcc/c-keys
  ;; Buffer
  "b f" '(clang-format-buffer :wk "Format")
  ;; Mode (C)
  "m"   '(:ignore t :wk "C")
  "m g" '(x8dcc/c-include-guard :wk "Include guards")
  ;; Fold
  "z i" '(hide-ifdef-mode :wk "Unused ifdefs"))
#+end_src

* Modeline

Display line and column number on modeline, not just line.

#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

This function is used to justify elements of the modeline to the
left. *It's a bit unreliable, so it's currently unused.*

#+begin_src emacs-lisp
(defun x8dcc/mode-line-render (left right)
  "Return a string of `window-width' length. With LEFT and RIGHT justified
respectively."
  (let ((available-width
         (- (window-total-width)
            (+ (length (format-mode-line left))
               (length (format-mode-line right))))))
    (append left
            ;; (("%%%ds", 5) "") -> ("%5s", "") -> "     "
            (list (format (format "%%%ds" available-width) ""))
            right)))
#+end_src

This function will be used bellow to display the number of selected characters
and lines in the modeline in the following format: =(Sel 51 L4)=.

#+begin_src emacs-lisp
(defun x8dcc/mode-line-region-chars (prefix middle subfix)
  "If there are characters in the selection, return a string with the number of
characters and lines, between the PREFIX and SUBFIX. If the region takes up more
than one line, it will also display the MIDDLE argument right after the number
of characters, followed by the number of lines."
  (if (use-region-p)
      (let ((characters (abs (- (region-end) (region-beginning))))
            (lines (abs (- (line-number-at-pos (region-end))
                           (line-number-at-pos (region-beginning))))))
        (concat prefix
                (number-to-string (+ characters 1))
                (if (> lines 0)
                    (concat middle (number-to-string (+ lines 1))))
                subfix))))
#+end_src

Set the modeline format itself. We need to use =setq-default= since it's
a buffer-local variable.

Note that the evil mode indicator is set inside the =:init= section of
the [[Evil & Evil collection][Evil]] package
(=evil-mode-line-format '(after . mode-line-frame-identification))=).

#+begin_src emacs-lisp
(setq-default mode-line-format
              '("%e  λ "
                mode-line-front-space
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                "  "
                mode-line-buffer-identification
                "  "
                mode-line-position
                (:eval (x8dcc/mode-line-region-chars "(Sel " " L" ") "))
                "  "
                mode-line-modes
                (vc-mode vc-mode)
                "  "
                mode-line-misc-info))
#+end_src

* Line numbers

Style of line numbers. If set to =nil=, line numbers are disabled, =t= for
normal numbers and =relative= for relative line numbers.

If =display-line-numbers-width-start= is =t=, the width of the line
numbers will be calculated depending on the lines of each buffer.

TODO: Does this always work?

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative
      display-line-numbers-width-start t)
#+end_src

Hide line numbers in the specified modes. For more information on
=x8dcc/x8dcc/hook-to-targets= see [[*Misc functions and macros][Misc functions and macros]].

#+begin_src emacs-lisp
(x8dcc/hook-to-targets (lambda () (display-line-numbers-mode 0))
                       '(eshell-mode-hook
                         solitaire-mode-hook
                         mpuz-mode-hook
                         bubbles-mode-hook
                         gomoku-mode-hook
                         snake-mode-hook
                         tetris-mode-hook))
#+end_src

* Misc visual settings

By default, don't wrap lines, truncate them (=truncate-lines=). This can be
toggled with =SPC t w=, see [[Space keybinds][Space keybinds]].

Don't wrap lines using words by default (=global-visual-line-mode=).

#+begin_src emacs-lisp
(setq-default truncate-lines t)
(global-visual-line-mode 0)
#+end_src

Don't hide =isearch= results after some time.

NOTE: This doesn't really work with evil's =n=. Use =SPC s h= instead.

#+begin_src emacs-lisp
(setq lazy-highlight-cleanup nil
      lazy-highlight-initial-delay nil
      lazy-highlight-max-at-a-time nil
      isearch-allow-scroll t)
#+end_src

Set 80 as the column line, with the specified character.

NOTE: Try using =?\u00A6= (=¦=) instead of =?\u2502= (=│=) if there are spaces
between lines.

#+begin_src emacs-lisp
(setq-default display-fill-column-indicator-character ?\u00A6
              fill-column 80)

(add-hook 'prog-mode-hook
          (lambda ()
            (display-fill-column-indicator-mode 1)))
#+end_src

Set monday as the first day of the week.

#+begin_src emacs-lisp
(setq org-agenda-start-on-weekday 1
      calendar-week-start-day 1
      org-agenda-weekend-days '(6 0)
      calendar-weekend-days '(6 0))
#+end_src

* Misc mode settings

Follow git symlinks by default.

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

Automatically update buffer if the file has changed on disk.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

Open files at last edited position. Persists across sessions.

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

Remember minibuffer history between sessions

#+begin_src emacs-lisp
(savehist-mode 1)
#+end_src

Delete trailing whitespaces on buffer save.

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Use spaces instead of tabs. Should be the default already.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

Use =#'indent-relative-first-indent-point= instead of =#'indent-relative= for more
intuitive indentation.

#+begin_src emacs-lisp
(setq-default indent-line-function #'indent-relative-first-indent-point)
#+end_src

Set =tab-always-indent= to =nil= instead of =t= so it inserts literal tabs (or spaces)
after trying to indent the line.

#+begin_src emacs-lisp
(setq tab-always-indent nil)
#+end_src

Enable auto-closing of brackets with =electric-pair-mode=.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (electric-pair-mode 1)))
#+end_src

* Backups

Emacs uses =file.txt~= files for backups, and =#file.txt#= for temporary
files. Having them in the same folder as the original file is not
ideal.

Change backup directory to =~/.emacs.d/trash/=. Note that we use =`( )=
instead of a normal quote to evaluate the =,( )= part.

We also set other variables to not de-link hard links
(=backup-by-copying=), use version numbers on backups (=version-control=),
deleting excess backups (=delete-old-versions=), and specifying the
number of versions to keep.

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,(concat user-emacs-directory "trash"))))

(setq auto-save-file-name-transforms
      `((".*" ,(concat user-emacs-directory "trash") t)))

(setq backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

* Battery

Show battery in mode line. If the battery is "N/A" or "unknown", don't
display.

#+begin_src emacs-lisp
(with-eval-after-load 'battery
  (if (not (null battery-status-function))
      (let ((power-source (battery-format "%L" (funcall battery-status-function)))
            (power-status (battery-format "%B" (funcall battery-status-function))))
        (if (or (string= "N/A" power-source)
                (string= "unknown" power-source)
                (string= "N/A" power-status)
                (string= "unknown" power-status))
            (display-battery-mode 0)
          (display-battery-mode 1)))))

(require 'battery)
#+end_src

* Eshell

Change the eshell prompt.

The third parameter of =concat= is used to reset the font face after changing the
"λ" color. If we didn't do this, the text written by the user would be the same
color as the lambda. I don't really like this method, but I don't know any other
way of "resetting" the face.

We also need to set =eshell-prompt-regexp= to match our new prompt. This is
important so eshell knows what part of the line was the user input when
executing a previous command.

#+begin_src emacs-lisp
(setq eshell-prompt-function (lambda ()
                               (concat
                                (abbreviate-file-name (eshell/pwd))
                                (propertize " λ" 'face '(:foreground "#8490B3"))
                                (propertize " " 'face '(:inherit default))))
      eshell-prompt-regexp "^[^#λ]* [#λ] ")
#+end_src

This function is basically the same from =projectile-run-eshell= in
[[https://github.com/bbatsov/projectile/blob/0163b335a18af0f077a474d4dc6b36e22b5e3274/projectile.el#L4531-L4541][projectile.el]]. If we are in a project, it will open the shell in the project's
root. The difference is that if we are not, it will open =eshell= normally. It
also does not rename the buffer, so our =display-buffer-alist= rules still apply.

#+begin_src emacs-lisp
(defun x8dcc/eshell-project-or-current (&optional eshell-func)
  "Run ESHELL-FUNC in the project's root whenever possible."
  (interactive)
  (unless eshell-func (setq eshell-func #'eshell))
  (if (projectile-project-p)
      (projectile-with-default-dir (projectile-acquire-root)
        (funcall eshell-func))
    (funcall eshell-func)))
#+end_src

This function will be used to create an =eshell= buffer named =*eshell-popup*=. This
will be used for making different rules for normal and popup eshell buffers on
=display-buffer-alist=.

#+begin_src emacs-lisp
(defun x8dcc/eshell-popup (&optional buffer-name)
  "Create or open a popup eshell buffer.

Creates a new eshell buffer with the specified BUFFER-NAME, or
\"*eshell-popup*\" if omited. Depending on `projectile-project-p', it will call
`eshell' in the project root or in the current folder. Useful for setting
different rules in `display-buffer-alist'."
  (interactive)
  (unless buffer-name (setq buffer-name "*eshell-popup*"))
  (let ((eshell-buffer-name buffer-name))
    (x8dcc/eshell-project-or-current)))
#+end_src

If the buffer is called =*eshell-popup*=, open it in a side window, instead of
taking over the current window.

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*eshell-popup\\*"
               (display-buffer-in-side-window (side . bottom))))
#+end_src

* Dired

Change the =ls= flags used by dired.

#+begin_src emacs-lisp
(setq dired-listing-switches "-l --all --sort=version --group-directories-first --human-readable")
#+end_src

Allow dired to recursively copy and delete folders, after asking for confirmation.

#+begin_src emacs-lisp
(setq dired-recursive-copies  'top
      dired-recursive-deletes 'top)
#+end_src

* Ediff

Don't open a new frame for the =ediff= control panel.

#+begin_src emacs-lisp
(setq ediff-window-setup-function #'ediff-setup-windows-plain
      ediff-split-window-function #'split-window-horizontally)
#+end_src

* ERC

Enable ERC features.

#+begin_src emacs-lisp
(require 'erc)
(require 'erc-log)
(require 'erc-stamp)
(require 'erc-track)
;(require 'erc-spelling)

(erc-log-enable)
(erc-stamp-enable)
(erc-track-enable)
;(erc-spelling-enable)
#+end_src

Add an [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][advice]] so =erc-tls= is called instead of =erc=.

#+begin_src emacs-lisp
(advice-add 'erc :override #'erc-tls)
#+end_src

General ERC settings.

#+begin_src emacs-lisp
(setq erc-nick           "x8dcc"
      erc-system-name    "x8dcc"
      erc-user-full-name "x8dcc"

      ;; Don't give away machine name
      erc-anonymous-login t
      ;; Don't reply to CTCP
      erc-disable-ctcp-replies t
      ;; Notify CTCP requests
      erc-paranoid t
      ;; Warn blank lines
      erc-warn-about-blank-lines t

      ;; Enable logging
      erc-enable-logging t
      ;; Directory for logs
      erc-log-channels-directory (concat user-emacs-directory "erc-log")
      ;; When to write logs
      erc-log-write-after-send t
      erc-log-write-after-insert t
      ;; Timestamps
      erc-stamp-mode t
      erc-hide-timestamps t

      ;; Hide joins/leaves/quits
      erc-hide-list '("JOIN" "PART" "QUIT")
      ;; Max line width
      erc-fill-column 100
      ;; Align usernames to col 20
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 15
      ;; Prompt at the bottom of the screen
      erc-scrolltobottom-mode t
      erc-input-line-position -1
      ;; Messages to mode-line
      erc-track-showcount t
      erc-track-exclude-list '("NICK" "JOIN" "PART" "QUIT" "333" "353")

      ;; Don't bury ERC buffers by default
      erc-join-buffer 'buffer
      ;; Kill buffers for channels after /part
      erc-kill-buffer-on-part t
      ;; Kill buffers for private queries after quitting the server
      erc-kill-queries-on-quit t
      ;; Kill buffers for server messages after quitting the server
      erc-kill-server-buffer-on-quit t)
#+end_src

Set prompt to buffer name.

#+begin_src emacs-lisp
(setq erc-prompt (lambda ()
                   (concat "[" (buffer-name) "]:")))
#+end_src

* Mail

Set SMTP encryption, server and port.

#+begin_src emacs-lisp
(setq smtpmail-stream-type 'ssl
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465)
#+end_src

This is needed so it asks for password in the minibuffer. I needed it to avoid a
=gpg= error when running [[*ERC][ERC]].

#+begin_src emacs-lisp
(setq epg-pinentry-mode 'loopback)
#+end_src

For your credentials, you will need to create =~/.authinfo.gpg=. Generate a GPG
key pair with:

#+begin_src bash
gpg --quick-generate-key "My Name <my@email.address>"
#+end_src

Then, add your credentials to =~/.authinfo= in the following format. Keep in mind
that =PASSWORD= is not the password you use to log-in to google, but an *App
password*. Create one [[https://myaccount.google.com/apppasswords][here]].

#+begin_src text
machine smtp.gmail.com login EMAIL password "PASSWORD" port 465
#+end_src

Then encrypt the file using =M-x epa-encrypt-file= or by running:

#+begin_src bash
gpg -c ~/.authinfo
#+end_src

You can then delete the original =~/.authinfo= file.

For more information, see [[https://www.emacswiki.org/emacs/GnusAuthinfo][EmacsWiki]].

* Org mode
** Basic org settings

Enable "<s TAB" completion.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

Org agenda location.

#+begin_src emacs-lisp
(let ((expanded-org-directory (expand-file-name "~/Sync/Org/")))
  (if (file-directory-p expanded-org-directory)
      (setq org-directory expanded-org-directory
            org-agenda-files (list (concat org-directory "agenda.org")))))
#+end_src

Enable code block evaluation for the specified languages. Capitalization
matters.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((C . t)
                             (scheme . t)))
#+end_src

Disable footers in HTML exports.

#+begin_src emacs-lisp
(setq org-html-postamble nil
      org-export-time-stamp-file nil)
#+end_src

Enable colored links in PDF exports.

#+begin_src emacs-lisp
(setq org-latex-hyperref-template
      "\\hypersetup{
          pdfauthor={%a},
          pdftitle={%t},
          pdfkeywords={%k},
          pdfsubject={%d},
          pdfcreator={%c},
          pdflang={%L},
          colorlinks=true
       }\n")
#+end_src

NOTE: You will probably need the following packages for exporting PDF files:

#+begin_src bash
# Arch:
sudo pacman -S extra/texlive-latex extra/texlive-latexextra extra/texlive-plaingeneric

# Gentoo (untested):
sudo emerge app-text/texlive dev-texlive/texlive-latex dev-texlive/texlive-latexextra texlive-plaingeneric
#+end_src

** Visual org settings

Org visual settings.

The two fontify variables are used to control the styles of code, quote and
verse blocks. The =org-hide-emphasis-markers= variable is used to hide the =*text*=
markers, and just display bold. The last two variables are set to make sure the
indentation acts natively inside source blocks.

#+begin_src emacs-lisp
(setq org-fontify-quote-and-verse-blocks t
      org-src-fontify-natively t
      org-hide-emphasis-markers t
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively t)
#+end_src

Enable =org-indent-mode=, which hides leading '*' from titles.

Set =org-link-descriptive= to hide org links. This is changed by the
=org-toggle-link-display= function.

Disable =electric-pair-mode= pairing of '<', so we can use "<s TAB"
completion.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (org-indent-mode 1)
                           (setq org-link-descriptive 1)
                           (setq-local
                             electric-pair-inhibit-predicate
                             `(lambda (c)
                                (if (char-equal c ?<)
                                  t
                                  (,electric-pair-inhibit-predicate c))))))
#+end_src

Create an [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html][overlay]] for setting as invisible the commas that are used to escape
asterisks in org buffers. Credits to [[https://emacs.stackexchange.com/a/70127/40363][StackOverlow answer]].

NOTE: This is currently not called in any hook to avoid a performance impact.

#+begin_src emacs-lisp
(defun x8dcc/make-invisible (regex &optional group-num)
  "Make all ocurrences of REGEX invisible.

Searches all ocurrences of REGEX and adds them to an invisible overlay. If
GROUP-NUM is supplied, it will only add the N-th parentheses group of the regex
to the overlay."
  (interactive "sRegex: ")
  (unless group-num (setq group-num 0))
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward regex nil t)
      (let ((invisible-overlay (make-overlay (match-beginning group-num) (match-end group-num))))
        (overlay-put invisible-overlay 'invisible t)))))

;; NOTE: For hiding org commas, use:
;; (x8dcc/make-invisible "^\\s*\\(,\\)\\*" 1)
#+end_src

** Org capture

Used to quickly store data using templates.

See section [[https://orgmode.org/manual/Template-elements.html][10.1.3.1 Template elements]] and [[https://orgmode.org/manual/Template-expansion.html][10.1.3.2 Template expansion]] of the
org manual for more information.

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("n" "Note" entry
         (file+headline "notes.org" "Notes")
         "* %T Note\n%?")
        ("s" "Selection" entry
         (file+headline "notes.org" "Selections")
         "* %T Selection from [[%F][%f]]\n%?\n#+begin_quote\n%i\n#+end_quote")))
#+end_src

* C mode

Enable explicit tabs for C code (if not on beginning of line).

#+begin_src emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset tab-width
      c-tab-always-indent nil)
#+end_src

When using the =SPC z i= keybind, also call =hide-ifdefs=.

#+begin_src emacs-lisp
(setq hide-ifdef-initially t
      hide-ifdef-lines t)
#+end_src

For using =ff-find-other-file=, search also in the specified include folders.

#+begin_src emacs-lisp
(with-eval-after-load 'find-file
  (setq-default ff-quiet-mode t)
  (dolist (path '("./include" ".."))
    (add-to-list 'cc-search-directories path)))
#+end_src

This function is useful for adding [[https://en.wikipedia.org/wiki/Include_guard][include guards]] to C headers.

#+begin_src emacs-lisp
(defun x8dcc/c-include-guard (&optional filename)
  (interactive)
  (unless filename
    (setq filename (file-name-base buffer-file-name)))
  (let ((macro-name (upcase (concat filename "_H_" ))))
    (save-excursion
      (goto-char (point-min))
      (insert "\n"
              "#ifndef " macro-name "\n"
              "#define " macro-name " 1\n")
      (goto-char (point-max))
      (insert "\n"
              "#endif /* " macro-name " */"))))
#+end_src

* GDB

Launch in the /Many Windows/ layout.

#+begin_src emacs-lisp
(setq gdb-many-windows t)
#+end_src

Restore previous windows when GDB stops.

#+begin_src emacs-lisp
(setq gdb-restore-window-configuration-after-quit 'if-gdb-many-windows)
#+end_src
